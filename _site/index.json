{
  "content/batch-interface-framework/alarm-tag-templates.html": {
    "href": "content/batch-interface-framework/alarm-tag-templates.html",
    "title": "Alarm tag templates",
    "keywords": "Alarm tag templates Alarm tag templates allow you to configure the event notifications you will receive. Configuration Index Assigns a unique numeric identifier for the template. Name Specifies how the alarm tag is named. Click the Name field to activate the Add Placeholder button. Click the button to open the Build a Placeholder window. There you can select and add a placeholder and select from the following Advanced parsing features: Add value : Select to add and specify placeholder values. Click Add to save your changes. Add substring parsing : Select and specify substring values. Click Add to save your changes. Select Left bound and either LBE or LBI from the dropdown menu to define the left boundary of the substring. Select Right bound and either RBE or RBI to define the right boundary of the substring. Select Delimiter then provide a name and a count to narrow the resulting substring. Value Specifies the value to be recorded. As with the Name field, click the Value field to activate the Add Placeholder button. You can edit placeholders to include values from the data emitted by the data source. Data type Specifies the PI data type of the value from the following options: String Integer Float Auto Float or string Translate Click the checkbox to activate the Translate button, which you can click to open the Translate window. There you can add and remove English Text and Foreign Text. Advanced features Descriptor Populates the tag's Descriptor field. Engineering units Unit of measurement. Alias Use the drop down menu to select from the following: Default : Defaults to alias name and filepath. Custom alias name : Provide a custom alias using one of the following format examples: Tag(#)alias = ABC\\def |test[module] Tag(#)alias = $[Area] |[module] ALARM alias Disable alias creation : No alias is created. Annotation Use the field provided to annotate the alarm tag. You have the option of selecting the Use a NameValues collection for annotation or Remove annotation from tag value ."
  },
  "content/batch-interface-framework/asset-attribute-templates.html": {
    "href": "content/batch-interface-framework/asset-attribute-templates.html",
    "title": "Asset attribute template",
    "keywords": "Asset attribute template The Asset Attribute associates data from the data source with a desired element. To create properties, you define Asset Attribute templates on the Templates page of the PI Event Frame Interface Manager . The Asset Attribute templates specify the data to be extracted. Placeholders, wildcards, and advanced parsing features enable you to extract precisely the desired data from the events that the interface reads from the data source. Setting Description Index Unique numeric ID (integer). Name Attribute name. Every attribute name under the same element must be unique. If the template does not define a name, the interface assigns a default name of \"Event_< n >\", where < n > is a unique integer. To write attribute at the top level regardless of the level from which the triggering event originated, specify the @ symbol as the first element in name path as follows: >@\\[Parameter] . Value Value to assign to attribute. Trigger The event that triggers the generation of the attribute. Updates can be triggered by the data source or by PI events such as the start or end of a recipe level. Translate Specifies whether the attribute is to be translated before being written to the PI System. Specify true or false (default is false). EngUnits Engineering units. Type INTEGER , FLOAT , STRING (Default), FLOATSTRING , AUTO . If Type is set to AUTO , the interface assigns the data type based on the first item of data that it receives. If the first value received is an integer but subsequent values are floating point, the interface creates an integer attribute or property and truncates any subsequent floating point values before storing them. To avoid truncating numeric input that includes a mix of integer and floating point values, specify FLOATSTRING rather than AUTO . Category Category UOM Unit of measure. To map the units of measure in the data source to the correct PI AF engineering units, check the UOM check box and configure the mapping between the source units of measure and the units available in PI AF. Descriptor Descriptor ALLOWEMPTYVALUE True = T will allow an attribute to be created with an empty value. TAGPATH A full path to a PI Tag: \\\\MyServer\\Sinusoid . This will cause the attribute to be a data reference to the PI tag indicated. An attribute can have a Value or a TagPath. If it has both, then the Value will be used. ASSETPATH There can be multiple paths an asset can be configured to follow. Template example one Asset Attribute that has a value: ASSETATTRIBUTE[1].ASSETPATH=[REFERENCECATEGORY]\\[REFERENCE] ASSETATTRIBUTE[1].CATEGORY=[ATTRIBUTECATEGORY] ASSETATTRIBUTE[1].VALUE=[VALUE] ASSETATTRIBUTE[1].DESCRIPTOR=[ATTRIBUTEDESC] ASSETATTRIBUTE[1].ENGUNITS=[ATTRIBUTEUOM] ASSETATTRIBUTE[1].TYPE=AUTO ASSETATTRIBUTE[1].TRIGGER=[EVENT,value=\"ELEMENT ATTRIBUTE\"] ASSETATTRIBUTE[1].ALLOWEMPTYVALUE=T Template example two Asset Attribute that has a tagpath: ASSETATTRIBUTE[5].NAME=[ATTRB1] ASSETATTRIBUTE[5].ASSETPATH=[REFERENCECATEGORY]\\[REFERENCE] ASSETATTRIBUTE[5].CATEGORY=[ATTRIBUTECATEGORY] ASSETATTRIBUTE[5].TAGPATH=\"\\\\MyServer\\[DATAREFERENCE,delim=\"/\",count=4]\" ASSETATTRIBUTE[5].DESCRIPTOR=[ATTRIBUTEDESC] ASSETATTRIBUTE[5].ENGUNITS=[ATTRIBUTEUOM] ASSETATTRIBUTE[5].TYPE=AUTO ASSETATTRIBUTE[5].TRIGGER=[EVENT,value=\"ELEMENT ATTRIBUTE\"][ATTRIBUTEDATTYPE,value=\"TagPath\"] ASSETATTRIBUTE[5].ALLOWEMPTYVALUE=T"
  },
  "content/batch-interface-framework/command-line-parameter-reference/command-line-parameter-reference.html": {
    "href": "content/batch-interface-framework/command-line-parameter-reference/command-line-parameter-reference.html",
    "title": "Command line parameter reference",
    "keywords": "Command line parameter reference <!-- Customized for Emerson Syncade --> Use PI Event Frames Interface Manager to configure the interface, and to maintain batch interface settings files. This section describes the command line settings and is provided for troubleshooting purposes. Note: To ensure that settings files are formatted correctly, always use PI Event Frames Interface Manager to configure settings. Do not edit settings files manually. The following table displays command line settings supported by PI Interface for Emerson Syncade Batch. This list of settings can also be invoked from the command line by specifying the -? flag. <!-- Mark Bishop 6/18/21: Commented-out parameters don't apply to Emerson Syncade --> Available command line parameters The following headings describe each command line parameter available. /abto =<#days> (Optional) Specifies how long, in addition to the CACHETIME setting, the interface waits before closing a batch for which no end event has arrived. When an abandoned batch is closed, the interface uses the timestamp of its last event as the end time and logs an \"Abandoned batch found\" message. Default is 100 days, minimum is .042 days (approximately one hour), and maximum is 365 days. /adu =[true | false] (Optional) Enable the creation of unit batches for recipes in units that are allocated at the phase level rather than the unit batch level. By default, the interface requires the unit name to be present in the unit batch start event. When you enable /adu, the interface creates the unit batch and defers setting the unit name until the phase-level allocation event arrives. <!-- ### `/batchrcp =[true | false]` (ABB only) Collect full task hierarchy. By default, the interface collects four levels. For details, refer to ABB 800xA batch start and stop events. --> /bidm =<list> (Optional) Override the incoming batch ID by selecting a substring. Specify one or more masks composed of text and wildcards, to be used to compose the desired batch ID from the contents of the source BatchID field. The resulting batch ID is used for the Batch ID field of the top-level procedure and for the [BATCHID] placeholder. By default, the batch ID field in unit procedures contain the full batch ID from the data source. To use the truncated batch ID instead, configure the TBID setting. Valid wildcards are as follows: Wildcard Description # Single digit numerical value, 0-9 @ Single alpha character, a-z, A-Z ? Any single symbol ! Repeat the previous mask symbol * Any set of symbols For example, if the incoming Batch ID is: lot30112 / 90dev123 / 12345stp / ld567 The following list shows example masks and resulting data. Mask Result \"######\" 30112 \"###@!\" 90dev \"*###@!\" lot30112 / 90dev \"@@@@, #8dev4, #!\" 30112 In the last example, the first and second masks do not match, so the third mask is used. /cachetime=<days> (Optional) Batches are cached in memory to enable the interface to capture events sent by the BES after the batch has closed. This setting specifies how long (in days) completed batches are cached. To specify fractions of a day, use decimal values. For example, /cachetime=7.5 releases completed batches when their end time is more than 7 days and 12 hours from the current time. The default value is 1 day, minimum is .042 days (approximately one hour), and maximum is 60 days. /dac (Optional) Disable arbitration counters: directs the interface to release a unit on the first resource release event even if the number of acquire events is higher than number of release events. By default, the interface requires the number of acquire and release events for a unit to be the same. /damcae Ignore events from an Event Chronicle (alarms & events) data source when creating or checking PI Module Database objects. If the module path defined for an AlarmTag[#].Alias entry contains the root node symbol ($), the interface checks the module path regardless of whether this option is enabled. /datasec=<string> (Optional) Specifies the security settings to be assigned to interface-generated tags. For PI Data Archive 3.4.375.99 or earlier, use owner, group, world format. Example: /datasec=\"o:rw g:r w:r\" For PI Data Archive 3.4.380.36 or later, specify an access control list (ACL). Example: /datasec=\"piadmin: A(r,w) | PIEngineers: A(r)\" /db =[#] (Optional) Enabled debugging output: 0: Log only errors and warnings (default) 1: Log errors, warnings and major success messages 2: Log all messages (most verbose) /dpretc (Optional – event frames only) Disable propagation of referenced elements to children. By default, the interface propagates each event frame element reference to its children event frames. <!-- ### `/equipmentXML =<filepath>` (Optional) Specifies the location of the DeltaV-generated equipment hierarchy XML file. The EMDVB interface uses this reference data to locate missing ProcessCell field by searching based on the combination of Area and Unit fields. Valid only when a DeltaV AE SQL datasource is defined. Example: ```text /EquipmentXML=\"C:\\DeltaV\\Equip.xml\" ``` --> /failoverID =<string> (Optional) Configure a unique failover ID for the interface instance. Must be used with the /FailOverTag parameter. Example: /FailOverID=\"intf1\" /failovertag =<tag name> (Optional) Specifies the PI tag to be used to track the primary interface instance. Must be used with the /FailOverID parameter. Example: /FailOverTag=\"Batch_FailoverTag\" /host =host:port (Required) Specifies the PI Data server where data is to be stored. Host is the IP address or domain name of the server node. Port is the port number for TCP/IP communication. The port is always 5450. Examples: /host=marvin /host=marvin:5450 /host=206.79.198.30 /host=206.79.198.30:5450 /id =<identifier> (Required) Specify a one- to nine-number identifier for the interface instance. Assigned to the Location1 attribute of tags that are updated by the interface instance. /includeincompletedata (Optional) Enables the collection of all unit procedures without and associated UNIT. Without this option unit procedures that do not have phase state that associated with a particular UNIT will not be shown as events in PI AF. /inifile =<path> (Optional) Override the default location and name for the initialization file. By default, the .ini file resides in the interface installation directory and has the same file name and the .bat file. /link =<AF element path> (Deprecated, see /readlink and /writelink.) Combine event frames from different interface instances. Useful when you have an MES controlling multiple BESs. Configure an interface instance for each BES, specifying the same linkage element. The BES interface instances create event frame references under the MES event frames that refer to the BES interface instances. For Emerson Syncade systems, the AutomationBatchID field must match the batchID of the batch created by the BES. /maxqtf =<days> (Optional) Sets the maximum number of days for which a query can return data. Used to break a large query into a set of smaller queries, to ensure that the system does not run out of memory. The value can be fractional. Minimum: 0.001 Maximum: 180 Default: 30 /maxstoptime =<seconds> (Optional) Specifies (in seconds) the maximum time allowed for the interface to properly shutdown. If shutdown takes longer than the specified time, the interface is forced to terminate immediately. Default: 120 seconds /merge (Optional) Enable merging of multiple source batches with same ID. The original data for each batch merged is stored in PI properties under a node named using the ID of the original batch. The data includes the original batch ID, start time (UTC), end time (UTC), product and formula name. The interface merges only batches that are cached in local memory. The time frame for merging is configured using the /cachetime switch. If the IDs of the batches you want to merge are different, use the /bidm flag to override incoming IDs. Example: Given the following five batches running within the cache time frame. Test12345_1 Test_12345_2 CleaningTest USPO12345_test CleaningTest With merging enabled, only the CleaningTest batches are merged. To merge the other three batches, which have IDs containing the string \"12345\", specify /bidm=######. /mode =<mode> (Optional) Valid modes are as follows: Realtime: (Default) Real-time data collection. If a recovery start time is specified (/rst), the interface recovers data before starting realtime collection. Stat: Statistics mode. Compare source data with the corresponding PI System batch data. The interface does not write to or modify any data PI batch data. On completion, the interface reports results and stops. Delete: Delete batch data from PI archives for specified period, leaving data from all other sources intact. Use only if the interface is unable to synchronize source batch data with the PI System. Must be used in conjunction with the recovery mode switches (/rst and /ret). NoData: Newly-added tags, units and modules are indexed (referenced) in the primary PI archive, but older archives do not have entries for these modules, units and tags. In NoData mode, the interface creates modules, units, tags and tag aliases without processing batch data and writing events to the tags. To recover batch data for a period prior to the one in the primary archive, you must reprocess older archives with the offline archive utility. Manual archive reprocessing creates indexes for newly-added units, modules, tags. Always run the interface in this mode before writing new batch data to older PI archives (that is, archives other than the primary archive). /mop (Optional) Merge identically-named operations under the same parent unit procedure. The start time of the combined operation is the start of the earliest operation and the end time is the end time of the latest or longest operation that was merged. /mup (Optional) Merge identically-named sequential unit procedures running on the same unit into a single unit procedure. Unit procedures are not merged if the unit was used by another recipe between candidates for merging. The start time of the resulting merged unit procedure is the start of the earliest unit procedure, and the end time is the end time of the latest or longest unit procedure that was merged. /noarbitration Create unit batches based solely on source batch recipe data. For use when the source Batch Executive System (BES) provides batch data without equipment arbitration. /ns[=lang] (Optional) Perform numerical conversions using the specified language's conventions. Useful when the numerical conventions differ from the default settings (for example, comma instead of decimal point). Default is \"English_UnitedStates\". If you omit the language parameter, the interface uses the \"Regional and Language Options\" settings in effect for the interface node. Language types and abbreviations: * chinese chinese-simplified (chs) * chinese-traditional (cht) * czech (csy) * danish (dan) * belgian, dutch-belgian (nlb) * dutch (nld) * australian, english-aus (ena) * canadian, english-can (enc) * english english-nz (enz) * english-uk (uk) * american, american-english, english-american, english-us, english-usa, (enu) (us) (usa) * finnish (fin) * french-belgian (frb) * french-canadian (frc) * french (fra) * french-swiss (frs) * german-swiss, swiss (des) * german (deu) * german-austrian (dea) * greek (ell) * hungarian (hun) * icelandic (isl) * italian (ita) * italian-swiss (its) * japanese (jpn) * korean (kor) * norwegian-bokmal (nor) * norwegian norwegian-nynorsk (non) * polish (plk) * portuguese-brazilian (ptb) * portuguese (ptg) * russian (rus) * slovak (sky) * spanish (esp) * spanish-mexican (esm) * spanish-modern (esn) * swedish (sve) * turkish (trk) /piconnto =<seconds> (Optional) Override the default SDK setting for PI connection timeout. /pidato =<seconds> (Optional) Override the default SDK setting for PI data access timeout. /pipswd =<password> (Optional) Specify the user password to be used to connect to the PI Data Archive. By default, the interface uses PI trusts for authentication. /piuser =<name> (Optional) Specify the user name to be used to connect to the PI Data Archive. By default, the interface uses PI trusts for authentication. /print =<filename> (Optional) Prints the results of first scan to specified text file. The results include the batch tree, tag list, and equipment tree. Used for troubleshooting. /ps =pointsource Specifies the point source for the points maintained by the interface. /ptsec =<string> (Optional) Specifies the access security settings to be assigned to interface-generated tags. For PI Data Archive version 3.4.375.99 or earlier, use owner, group, world format. Example: /ptsec=\"o:rw g:r w:r\" For PI Data Archive version 3.4.380.36 or later, specify an access control list (ACL). Example: /ptsec=\"piadmin: A(r,w) | PIEngineers: A(r)\" /ras =<startstr, stopstr> (Optional) Directs the interface to use the \"Report\" event to create phase steps under active phase states. The phase step name and start/stop events are obtained from the \"Descript\" column. The start and stop strings must start in the same position in the data source and must not be the first characters in the \"Descript\" column. The phase step name is derived from the characters preceding the start/stop text. Specify the strings in a double-quoted comma-separated list, as shown in the example below. Example: /ras=\"-STRT, -STOP\" If the Descript Column contains TEST123-STRT-B, the interface generates a phase step named \"TEST123\" under the currently active phase state. Open phase steps are closed by the end of the parent operation and not by the end of parent phase or phase state. <!-- ### `/readlink= <AFelementpath>` Combine event frames from different interface instances. For an MES controlling one or more BES systems, configure /readlink on the MES interface and configure an interface instance for each BES, specifying the same linkage element in the BES /writelink setting. The BES interface instances will then create event frame references under the MES event frames that refer to the BES event frames. For Emerson Syncade systems, the AutomationBatchID field must match the batchID of the batch created by the BES. For a BES interface controlling one or more MES systems, configure /readlink on the MES interface and configure an interface instance for each BES, specifying the same linkage element in the BES /writelink setting. The MES interface will then create event frame references under the BES event frames that refer to the MES event frames. Link templates must also be configured to define which events specify a link. ### `/restore` For the ABB 800xA interface, enable recovery of batches from restored archives in all configured ABB 800xA data sources. --> /restef (Optional) Enables an event frame with references to inherit security settings from its primary reference element. /ret =<datetime> (Optional) Specifies the end time for data recovery. The interface recovers batches that start before the specified time, including batches that end after the specified end time. Specify the time using the interface node format and time zone. /retry =<seconds> (Optional) Specifies how often the interface retries a failed attempt to write data. The default is 60 seconds. /retryto =<seconds> Specifies how long the interface retries a failed attempt to write data before timing out. By default, the interface never times out. If you configure a timeout setting, be advised that you risk losing data. /rst =<datetime> (Optional) Specifies recovery start time. The interface recovers batches that start after the specified time, as well as batches that start before the specified time but end after it. Specify the time using the interface node format and time zone. /rti Remove trailing index from Recipe fields. Applicable to Procedure, Unit Procedure and Operation Recipe fields. Emerson EVT data source only. /scan =<seconds> (Optional) Specifies, in seconds, how often to scan the data source for new data. The default is 60 seconds. A scan that returns a large amount of data can cause the interface to skip the subsequent scan. /singlerun (Optional) Perform one scan and stop. /smp =\"equipment path\" (Optional) Specifies an alternate PI Module path or PI AF element path for a particular equipment hierarchy. By default, the interface scans starting at the root level. Use the following syntax: \\\\<RootModule>\\<SubModule>\\<…> <!-- ### `/sqlconnto =<seconds>` (DeltaV SQL only) (Optional) Override the default SQL timeout setting (60 seconds). ### `/sqldato=<seconds>` (DeltaV SQL only) (Optional) Override the default SQL data access timeout setting (100 seconds). --> /swaptime =<seconds> (Optional) Specifies, in seconds, how long the current primary interface must be unavailable before failover occurs. Default: 300 seconds. /tbid (Optional) Use the truncated batch ID in the batch ID field of unit procedures. Incoming batch IDs are reformatted using the mask defined in the /bidm parameter. /tbse (Optional) Directs the interface to use top level recipe start/end events for creating batch objects. By default, the interface uses batch load/unload events. Intended for batches with S88 recipe types: Procedure, Unit Procedure, Operation, and Phase. /ts=GMT | LCL (Optional) Specifies how the interface interprets event timestamps from an SQL data source. Options are local time or GMT. Default is GMT. <!-- ### `/uobev` (DeltaV SQL 9.3+ only) (Optional) Directs the interface to use the original batch event view. By default the interface queries 17 tables to retrieve data for batch-associated events. Note that this view does not provide explicit [Descript], [Pval] and [EU] fields. Instead the [Descript] field combines data from all three fields. This option is provided for backward compatibility. --> /ubr <!-- Customized for Emerson Syncade --> Default settings for Emerson batch interfaces: /UBR = false If /UBR = true the interface will use SYSTEM MESSAGE to control the start and end of event frames. Example System Messages are BEGIN OF BATCH , END OF BATCH , UNIT PROCEDURE STARTED , and UNIT PROCEDURE ENDED . If /UBR = false the interface will use STATE CHANGE to control the start and end of event frames. Example State Change messages are RUNNING , REMOVED , ABORTED , COMPLETE , STOPPED , and ABANDON . The interface will combine the state change with the recipe ( Batch , UnitProcedure , Operation , Phase ) to determine which recipe step has changed state. Provided for backward compatibility with version 1.0.0.0 of the interface. <!-- ### `/WEBSRVDISABLED=[true | false]` (Optional) If not added it will default to false. This parameter is only supported in interface PIEMDVBCS and allows the interface to ignore checking or sending requests to the Syncade workflow web services. If connecting to WF 4.9 this parameter must be set to true. Added in version 4.0.30. ### `/writelink= <AFelementpath>` Combine event frames from different interface instances. For an MES controlling one or more BES systems, configure /writelink on the MES interface and configure an interface instance for each BES, specifying the same linkage element in the BES /readlink setting. The BES interface instances will then create event frame references under the MES event frames that refer to the BES event frames. For Emerson Syncade systems, the AutomationBatchID field must match the batchID of the batch created by the BES. For a BES interface controlling one or more MES systems, configure /readlink on the MES interface and configure an interface instance for each BES, specifying the same linkage element in the BES /writelink setting. The MES interface will then create event frame references under the BES event frames that refer to the MES event frames. Link templates must also be configured to define which events specify a link. -->"
  },
  "content/batch-interface-framework/diagnostic-point-reference/diagnostic-point-reference.html": {
    "href": "content/batch-interface-framework/diagnostic-point-reference/diagnostic-point-reference.html",
    "title": "Diagnostic point reference",
    "keywords": "Diagnostic point reference <!-- Topic usually requires no modifications --> Performance tags, which are automatically created for each instance of the interface, enable you to monitor the performance of the instance. There are 35 performance tags, categorized as follows: Health monitoring Object counters Timers Health monitoring tags There are two tags designed to monitor the health of the interface: the HeartBeat tag and the DeviceStatus tag. The HeartBeat tag is updated with the scan frequency configured for the interface or 60 seconds, whichever is less. The value of the HeartBeat tag is a cycle of integers from 1 to 15. The device status tag is automatically created and configured by the interface on startup. The device tag reflects status as follows: Good : The interface is properly communicating and reading data from the data sources. 1 | Starting : The interface is executing its initialization routines. 2 | <details> : Indicates successful connection to the data source. 3 | <details> : Indicates failure to access the event journal file directory or failure to read data from the event journal file. The properties of health monitoring tags are provided in the table below, where the Prefix represents ` `_. Note: If these tags do not exist, the interface creates them automatically during startup. Tag name Point Type Loc1 Loc3 PointSource ExcDesc Prefix_DeviceStatus Int32 Intf ID 0 Intf Pt Src [UI_DEVSTAT] Prefix_HeartBeat Int32 Intf ID 1 Intf Pt Src [UI_HEARTBEAT] Object counter tags The first time it is started, the interface creates 24 tags designed to monitor its performance. Archiving flag for these tags is turned off. The following table contains common point attributes for this group of tags: Point type Location1 Point source Int32 <Interface ID> <Interface Point Source> The attributes for each performance counter tag are provided in the table below where the Prefix is defined as _ . All counters are set to 0 when the interface starts up. Tag Name Loc3 ExcDesc Description <interfaceID>_EventReadCount 2 [UI_EVENTREADCOUNT] Number of events read from the source since startup. <interfaceID>_ErrorCount 3 [UI_ERRORCOUNT] Number of errors since startup. <interfaceID>_SourceUnitCount 4 [UI_SOURCEUNITCOUNT] Number of units found on the data source(s) since startup. <interfaceID>_PIUnitCount 5 [UI_PIUNITCOUNT] Number of units added since startup. <interfaceID>_SourcePhaseModCount 6 [UI_SOURCEPHASEMODCOUNT] Number of phase modules found on the data source(s) since startup. <interfaceID>_PIPhaseModCount 7 [UI_PIPHASEMODCOUNT] Number of phase modules added since startup. <interfaceID>_SourceBatchCount 8 [UI_SOURCEBATCHCOUNT] Number of batches found on the data source(s) since startup. <interfaceID>_PIBatchCount 9 [UI_PIBATCHCOUNT] Number of batches added since startup. <interfaceID>_SourceUnitBatchCount 10 [UI_SOURCEUNITBATCHCOUNT] Number of unit batches found on the data sources(s) since startup. <interfaceID>_PIUnitBatchCount 11 [UI_PIUNITBATCHCOUNT] Number of unit batches added since startup. <interfaceID>_SourceSubBatchCount 12 [UI_SOURCESUBBATCHCOUNT] Total number of operations, phases, and phase states found on the data source since startup. <interfaceID>_PISubBatchCount 13 [UI_PISUBBATCHCOUNT] Total number of operations, phases, and phase states added since startup. <interfaceID>_SourcePropertyNodeCount 14 [UI_SOURCEPROPNODECOUNT] Number of property nodes found in data source(s) since startup. <interfaceID>_PIPropertyNodeCount 15 [UI_PIPROPNODECOUNT] Number of PIProperty objects (nodes) added since startup. <interfaceID>_SourcePropertyEventCount 16 [UI_SOURCEPROPEVENTCOUNT] Number of events to be written to the batch properties found on the data source(s) since startup. <interfaceID>_PIPropertyEventCount 17 [UI_PIPROPEVENTCOUNT] Number of PIProperties (events) added since startup. <interfaceID>_SourceTagCount 18 [UI_SOURCETAGCOUNT] Number of tags found on the data source(s) since startup <interfaceID>_PITagCount 19 [UI_PITAGCOUNT] Number of PI tags added since startup. <interfaceID>_SourceTagEventCount 20 [UI_SOURCETAGEVENTCOUNT] Number of events to be written into tags found on the data sources(s) since startup. <interfaceID>_PITagEventCount 21 [UI_PITAGEVENTCOUNT] Number of events written into PI points since startup. <interfaceID>_SourceTagAliasCount 22 [UI_SOURCETAGALIASCOUNT] Number of tag aliases to be created based on the data source(s) since startup. <interfaceID>_PITagAliasCount 23 [UI_PITAGALIASCOUNT] Number of PI aliases added since startup. <interfaceID>_CachedBatchCount 24 [UI_CACHEDBATCHCOUNT] Number of batch objects cached in the local memory. <interfaceID>_OpenBatchCount 25 [UI_OPENBATCHCOUNT] Subset of cached objects that have no end time set. <interfaceID>_WaitingForEquipmentUB 34 [UI_UBWAITFOREQUIP] Number of unit batches that do not have equipment allocated yet. Timers The last performance tag category is composed of timer tags, which are built automatically on first interface startup. Each timer tag reports on how much time per scan it took the interface to perform a particular task. There are three categories of timer tag: data source reading, local data caching and synchronizing cached data with the PI System. TagName Loc3 ExcDesc Description <interfaceID>_SourceReadTime 26 [UI_SOURCEREADTIME] The time per scan it took the interface to read data from data source(s). <interfaceID>_TagCacheTime 27 [UI_TAGCACHETIME] The time per scan it took the interface to populate local tag cache. <interfaceID>_BatchCacheTime 28 [UI_BATCHCACHETIME] The time per scan it took the interface to populate the local batch cache. <interfaceID>_EquipmentCacheTime 29 [UI_EQUIPCACHETIME] The time per scan it took the interface to populate the local equipment (module) cache. <interfaceID>_BatchSyncTime 30 [UI_BATCHSYNCTIME] The time per scan it took the interface to synchronize local batch cache with the PI System. <interfaceID>_TagSyncTime 31 [UI_TAGSYNCTIME] The time per scan it took the interface to synchronize local tag cache with the PI System. <interfaceID>_EquipmentSyncTime 32 [UI_EQUIPSYNCTIME] The time per scan it took the interface to synchronize local equipment cache with the PI System. <interfaceID>_TotalTime 33 [UI_TOTALTIME] The total time per scan it took to read data, cache it in local memory and synchronize the local cache with the PI System."
  },
  "content/batch-interface-framework/diagnostic-tag-reference.html": {
    "href": "content/batch-interface-framework/diagnostic-tag-reference.html",
    "title": "Diagnostic/performance tag reference",
    "keywords": "Diagnostic/performance tag reference Performance tags, which are automatically created for each instance of the interface, enable you to monitor the performance of the instance. There are 35 performance tags, categorized as follows: Health monitoring Object counters Timers Health monitoring tags There are two tags designed to monitor the health of the interface: the HeartBeat tag and the DeviceStatus tag. The HeartBeat tag is updated with the scan frequency configured for the interface or 60 seconds, whichever is less. The value of the HeartBeat tag is a cycle of integers from 1 to 15. The device status tag is automatically created and configured by the interface on startup. The device tag reflects status as follows: \"Good\": The interface is properly communicating and reading data from the data sources. \"1 | Starting\": The interface is executing its initialization routines. \"2 | <details>\": Indicates successful connection to the data source. \"3 | <details>\": Indicates failure to access the event journal file directory or failure to read data from the event journal file. The properties of health monitoring tags are provided in the table below, where the Prefix represents _ . Note, if these tags do not exist. the interface creates them automatically during startup. Tag name Point Type Loc1 Loc3 PointSource ExcDesc Prefix_DeviceStatus Int32 Intf ID 0 Intf Pt Src [UI_DEVSTAT] Prefix_HeartBeat Int32 Intf ID 1 Intf Pt Src [UI_HEARTBEAT] Object counter tags The first time it is started, the interface creates 24 tags designed to monitor its performance. Archiving flag for these tags is turned off. The following table contains common point attributes for this group of tags: Point type Location1 Point source Int32 The attributes for each performance counter tag are provided in the table below where the Prefix is defined as _ . All counters are set to 0 when the interface starts up. Tag Name Loc3 ExcDesc Description _EventReadCount 2 [UI_EVENTREADCOUNT] Number of events read from the source since startup. _ErrorCount 3 [UI_ERRORCOUNT] Number of errors since startup. _SourceUnitCount 4 [UI_SOURCEUNITCOUNT] Number of units found on the data source(s) since startup. _PIUnitCount 5 [UI_PIUNITCOUNT] Number of units added since startup. _SourcePhaseModCount 6 [UI_SOURCEPHASEMODCOUNT] Number of phase modules found on the data source(s) since startup. _PIPhaseModCount 7 [UI_PIPHASEMODCOUNT] Number of phase modules added since startup. _SourceBatchCount 8 [UI_SOURCEBATCHCOUNT] Number of batches found on the data source(s) since startup. _PIBatchCount 9 [UI_PIBATCHCOUNT] Number of batches added since startup. _SourceUnitBatchCount 10 [UI_SOURCEUNITBATCHCOUNT] Number of unit batches found on the data sources(s) since startup. _PIUnitBatchCount 11 [UI_PIUNITBATCHCOUNT] Number of unit batches added since startup. _SourceSubBatchCount 12 [UI_SOURCESUBBATCHCOUNT] Total number of operations, phases, and phase states found on the data source since startup. _PISubBatchCount 13 [UI_PISUBBATCHCOUNT] Total number of operations, phases, and phase states added since startup. _SourcePropertyNodeCount 14 [UI_SOURCEPROPNODECOUNT] Number of property nodes found in data source(s) since startup. _PIPropertyNodeCount 15 [UI_PIPROPNODECOUNT] Number of PIProperty objects (nodes) added since startup. _SourcePropertyEventCount 16 [UI_SOURCEPROPEVENTCOUNT] Number of events to be written to the batch properties found on the data source(s) since startup. _PIPropertyEventCount 17 [UI_PIPROPEVENTCOUNT] Number of PIProperties (events) added since startup. _SourceTagCount 18 [UI_SOURCETAGCOUNT] Number of tags found on the data source(s) since startup _PITagCount 19 [UI_PITAGCOUNT] Number of PI tags added since startup. _SourceTagEventCount 20 [UI_SOURCETAGEVENTCOUNT] Number of events to be written into tags found on the data sources(s) since startup. _PITagEventCount 21 [UI_PITAGEVENTCOUNT] Number of events written into PI points since startup. _SourceTagAliasCount 22 [UI_SOURCETAGALIASCOUNT] Number of tag aliases to be created based on the data source(s) since startup. _PITagAliasCount 23 [UI_PITAGALIASCOUNT] Number of PI aliases added since startup. _CachedBatchCount 24 [UI_CACHEDBATCHCOUNT] Number of batch objects cached in the local memory. _OpenBatchCount 25 [UI_OPENBATCHCOUNT] Subset of cached objects that have no end time set. _WaitingForEquipmentUB 34 [UI_UBWAITFOREQUIP] Number of unit batches that do not have equipment allocated yet. Timers The last performance tag category is composed of timer tags, which are built automatically on first interface startup. Each timer tag reports on how much time per scan it took the interface to perform a particular task. There are three categories of timer tag: data source reading, local data caching and synchronizing cached data with the PI System. TagName Loc3 ExcDesc Description _SourceReadTime 26 [UI_SOURCEREADTIME] The time per scan it took the interface to read data from data source(s). _TagCacheTime 27 [UI_TAGCACHETIME] The time per scan it took the interface to populate local tag cache. _BatchCacheTime 28 [UI_BATCHCACHETIME] The time per scan it took the interface to populate the local batch cache. _EquipmentCacheTime 29 [UI_EQUIPCACHETIME] The time per scan it took the interface to populate the local equipment (module) cache. _BatchSyncTime 30 [UI_BATCHSYNCTIME] The time per scan it took the interface to synchronize local batch cache with the PI System. _TagSyncTime 31 [UI_TAGSYNCTIME] The time per scan it took the interface to synchronize local tag cache with the PI System. _EquipmentSyncTime 32 [UI_EQUIPSYNCTIME] The time per scan it took the interface to synchronize local equipment cache with the PI System. _TotalTime 33 [UI_TOTALTIME] The total time per scan it took to read data, cache it in local memory and synchronize the local cache with the PI System."
  },
  "content/batch-interface-framework/event-file-monitor-utility/event-file-monitor-utility.html": {
    "href": "content/batch-interface-framework/event-file-monitor-utility/event-file-monitor-utility.html",
    "title": "Event file monitor utility",
    "keywords": "Event file monitor utility <!-- Topic requires customization for specific interface --> For interfaces that can use event journal files for a data source, OSIsoft provides a utility that automatically copies new event journals from the directory where the BES creates them to the directory where the interface processes them. The utility is installed in the same directory as the interface, along with a template Windows command file that you can copy and edit to launch the utility with the desired settings. The executable file name ends with \"Sync\" (for example, EVTSync.exe ). To configure the utility, copy and edit the batch file, specifying settings using command line parameters as follows: Parameter Description /dest=<path> Full path to destination directory, where the interface processes incoming event journals. /rate=# Optional rate in seconds to scan source and destination directory. Default scan rate is 30 seconds. This parameter must be an integer value. /src=<path> Full path to source directory, where the BES creates event journals. After specifying settings, invoke the batch file to verify that the utility launches without errors. To ensure that the utility restarts when the interface node is rebooted, configure a Windows automatic service. To install the service, invoke the executable, specifying the -install switch. For example: EVTSync.exe –install . To verify that the service was added successfully, check the Microsoft Windows Services control panel."
  },
  "content/batch-interface-framework/failover.html": {
    "href": "content/batch-interface-framework/failover.html",
    "title": "Failover",
    "keywords": "Failover OSIsoft's batch interfaces and PI Event Frames Generator support two types of failover: Interface failover OSIsoft supports multiple instantiations of batch interfaces. If one fails, a second takes over the data collection process. For details on configuring failover, see Configure failover . Server failover If a server fails, batch data collection stops but failover on PI AF continues to work through a backup server. If server failover occurs while event frames are being generated, data is transferred to both primary and secondary servers."
  },
  "content/batch-interface-framework/glossary/glossary.html": {
    "href": "content/batch-interface-framework/glossary/glossary.html",
    "title": "Glossary",
    "keywords": "Glossary Available terms The following are high-context terminologies used in this document. Buffering N-Way Buffering ICU ICU Control Interface Node PI API PI Data Archive Collective PI Data Archive Node PIHOME PIHOME64 PI Message Log PI SDK PI Server Node PI SMT Pipc.log Point Service Tag (Input Tag and Output Tag) Buffering Buffering refers to an interface node's ability to store temporarily the data that interfaces collect and to forward these data to the appropriate PI Data Archives. N-Way Buffering If you have PI Data Archives that are part of a collective, PIBufss supports n-way buffering. N‑way buffering refers to the ability of a buffering application to send the same data to each of the PI Data Archives in a collective. (Bufserv also supports n-way buffering to multiple PI Data Archives in a collective; however, it does not guarantee identical archive records since point compression attributes could be different between PI Data Archives. With this in mind, OSIsoft recommends that you run PIBufss instead.) ICU ICU refers to the PI Interface Configuration Utility. The ICU is the primary application that you use to configure PI interface programs. You must install the ICU on the same computer on which an interface runs. A single copy of the ICU manages all of the interfaces on a particular computer. You can configure an interface by editing a startup command file. However, OSIsoft discourages this approach. Instead, OSIsoft strongly recommends that you use the ICU for interface management tasks. ICU Control An ICU control is a plug-in to the ICU. Whereas the ICU handles functionality common to all interfaces, an ICU control implements interface-specific behavior. Most PI interfaces have an associated ICU control. Interface Node An interface node is a computer on which the PI API and/or PI SDK are installed, and PI Data Archive programs are not installed. PI API The PI API is a library of functions that allow applications to communicate and exchange data with the PI Data Archive. All PI interfaces use the PI API. PI Data Archive Collective A PI Data Archive Collective is two or more replicated PI Data Archives that collect data concurrently. Collectives are part of the High Availability environment. When the primary PI Data Archive in a collective becomes unavailable, a secondary collective member node seamlessly continues to collect and provide data access to your PI clients. PI Data Archive Node A PI Data Archive node is a computer on which PI Data Archive programs are installed. The PI Data Archive runs on the PI Data Archive node. In earlier documentation, PI Data Archive was referred to as the PI Server. PIHOME PIHOME refers to the directory that is the common location for PI 32-bit client applications. A typical PIHOME on a 32-bit operating system is: C:\\Program Files\\PIPC. A typical PIHOME on a 64-bit operating system is: C:\\Program Files (x86)\\PIPC. PI 32-bit interfaces reside in a subdirectory of the Interfaces directory under PIHOME. For example, files for the 32-bit Modbus Ethernet Interface are in: [PIHOME ]\\PIPC\\Interfaces\\ModbusE. This document uses [PIHOME ] as an abbreviation for the complete PIHOME or PIHOME64 directory path. For example, ICU files in: [PIHOME ]\\ICU. PIHOME64 PIHOME64 is found only on a 64-bit operating system and refers to the directory that is the common location for PI 64-bit client applications. A typical PIHOME64 is: C:\\Program Files\\PIPC. PI 64-bit interfaces reside in a subdirectory of the Interfaces directory under PIHOME64. For example, files for a 64-bit Modbus Ethernet Interface would be found in: C:\\Program Files\\PIPC\\Interfaces\\ModbusE. This document uses [ PIHOME ] as an abbreviation for the complete PIHOME or PIHOME64 directory path. For example, ICU files in: [ PIHOME ]\\ICU. PI Message Log The PI message log is the file to which OSIsoft interfaces based on UniInt 4.5.0.x and later write informational, debug and error messages. When a PI interface runs, it writes to the local PI message log. This message file can only be viewed using the PIGetMsg utility. See the Message Logs section of the PI Universal Interface (UniInt) User Guide for more information on how to access these messages. PI SDK The PI SDK is a library of functions that allow applications to communicate and exchange data with the PI Data Archive. Some PI interfaces, in addition to using the PI API, require the use of the PI SDK. PI Server Node In earlier documentation, the term \"PI Server\" was used as a nickname for the PI Data Archive and a PI Server node was a computer on which PI Data Archive programs were installed. While the PI Data Archive remains a core server of the PI Server product, the product name \"PI Server\" now refers to much more than the PI Data Archive. OSIsoft documentation, including this user manual, is changing to use \"PI Server\" in this broader sense and \"PI Data Archive\" to refer to the historian core. PI SMT PI SMT refers to PI System Management Tools. PI SMT is the program that you use for configuring PI Data Archives. A single copy of PI SMT manages multiple PI Data Archives. PI SMT runs on either a PI Data Archive node or an interface node. Pipc.log The pipc.log file is the file to which OSIsoft interfaces based on UniInt versions earlier than 4.5.0.x write informational and error messages. When a PI interface runs, it writes to the pipc.log file. The ICU allows easy access to the pipc.log. Point The PI point is the basic building block for controlling data flow to and from the PI Data Archive. For a given timestamp, a PI point holds a single value. A PI point does not necessarily correspond to a \"point\" on the data source device. For example, a single \"point\" on the data source device can consist of a set point, a process value, an alarm limit, and a discrete value. These four pieces of information require four separate PI points. Service A Service is a Windows program that runs without user interaction. A service continues to run after you have logged off from Windows. It has the ability to start up when the computer itself starts up. The ICU allows you to configure a PI interface to run as a service. Tag (Input Tag and Output Tag) The Tag attribute of a PI point is the name of the PI point. There is a one-to-one correspondence between the name of a point and the point itself. Because of this relationship, PI System documentation uses the terms \"tag\" and \"point\" interchangeably. Interfaces read values from a device and write these values to an input tag. Interfaces use an output tag to write a value to the device."
  },
  "content/batch-interface-framework/how-batch-interfaces-work/equipment-arbitration-events-unavailable.html": {
    "href": "content/batch-interface-framework/how-batch-interfaces-work/equipment-arbitration-events-unavailable.html",
    "title": "Equipment arbitration events unavailable",
    "keywords": "Equipment arbitration events unavailable If the batch execution system does not generate equipment arbitration events, select the \"Disable Arbitration\" option (/noarbitration). Note that, without equipment arbitration events, the interface cannot precisely determine the start and end of unit batches. If you disable arbitration, the interface determines the start time of unit batches using the timestamp of the \"Unit Procedure Started\" event or the start of the next operation or phase for the unit, whichever is later. For end time, the interface uses the timestamp from the \"Unit Procedure Finished\" event or the end of the last operation or phase for the unit, whichever is earlier. For operation-level recipes, the interface uses the start time of the first phase as the start time for the parent operation and unit batch, and the timestamp of the \"Operation Finished\" message as the end time of the phase, operation and unit batch."
  },
  "content/batch-interface-framework/how-batch-interfaces-work/how-batch-data-is-stored/equipment-hierarchy.html": {
    "href": "content/batch-interface-framework/how-batch-interfaces-work/how-batch-data-is-stored/equipment-hierarchy.html",
    "title": "Equipment hierarchy",
    "keywords": "Equipment hierarchy <!-- Static topic. No modifications usually required --> When recording batch data from the data source in the PI Batch Database, the interface creates PI modules or PI AF elements representing equipment, according to the data from the data source. The following equipment hierarchy is created: By default, the hierarchy is located at the root level of the PI Module Database or the PI AF element hierarchy. To specify a different root, use PI Event Frame Interface Manager to configure the start module path. Aliases associate unit with PI tags that track measurements of interest that are related to the unit, for example, temperature. By default, aliases are created at the unit and phase module level. Unit aliases are created for a tag if the template includes the UNIT placeholder, and phase aliases are created if it contains the PHASEMODULE placeholder. Unit aliases are also created if the tag name contains the unit name (for example, if the unit name is UNIT202 and the tag name is \"UNIT202 report tag\"), a unit alias is created; likewise for phase modules. All batch interfaces support unit- and phase-level aliases, and some support creation of aliases at any level of the batch hierarchy. For details, refer to the interface-specific section of this guide."
  },
  "content/batch-interface-framework/how-batch-interfaces-work/how-batch-data-is-stored/event-frames.html": {
    "href": "content/batch-interface-framework/how-batch-interfaces-work/how-batch-data-is-stored/event-frames.html",
    "title": "Event frames",
    "keywords": "Event frames <!-- Static topic. No modifications usually required --> Use event frames to record batch data. Event frames allow you to use recipe templates to define the attributes to be stored in event frames at every level of the hierarchy. Each event frame contains the following fields: Name Description Start time End time Template Category (Default is \"OSIBatch\") Batch properties (stored in event frame attributes) Referenced elements such as unit or phase module To view batch event frames and AF elements generated by the interface, use PI System Explorer. In the root-level event frame, the Name field contains the batch ID from the data source. In lower-level event frames, the Name field contains the recipe name. In event frames for a procedure-level recipe, the product and recipe properties from the data source are stored as attributes. For unit procedure-level recipes, the batch ID and product from the data source are stored as attributes. If the highest recipe level is an operation or phase (that is, neither procedure nor unit procedure levels are defined), the interface creates event frames that correspond to the procedure and unit procedure level. The following sections explain how data is stored in event frames for each level of the batch hierarchy. Procedure For each batch in the data source, the interface creates a root-level event frame that represents the procedure in the recipe. Each root-level event frame contains a collection of child event frames that correspond to unit procedures. Data from source batch events (that is, properties) can be recorded in the attributes of the event frame and in PI points. Source batches can have identical IDs and recipe names in the same time frame. To match the source batch with an event frame, the interface stores additional information in the extended properties of the root event frame. The Name property contains the ID of the source batch, and the Value property contains an XML structure composed of the following batch data: Batch ID Product (searchable) Formula name Recipe (searchable) Recipe type Start time UTC End time UTC Interface name Interface ID Data source The following table shows how the source batch properties map to event frame data. Source Procedure Property Event Frame Field Event Frame Attribute BatchID Name Procedure Name Recipe Product Product Start Time Start Time End Time End Time By default, the interface captures the following batch-associated properties and stores them in procedure-level event frame attributes: Recipe header Formula header Recipe value Report For the preceding attributes, the name is assigned from the source [DESCRIPTION] column, the value from the source [PVALUE] columns, and the unit of measure attribute from the [EU] column. The procedure-level event frame can represent merged source batches. The product and recipe attributes contain data associated with the source batch that started the merged event frame. For each merged source batch, the interface creates an entry node in the event frame's extended properties, named using the unique ID of the source batch, with its value containing an XML structure composed of the original source batch properties. Unit Procedure The interface creates a unit procedure-level event frame for each unit procedure read from the data source. Each unit procedure-level event frame is a child of the procedure-level event frame and contains the subset of event frames that represent the source batch operation-level recipe. The start and end times of an event frame record the start and end of physical processing in a unit. The name field of the unit procedure-level event frames contains the unit procedure name as read from the data source. The batch ID and product properties are searchable attributes of the event frame. The following table shows how, by default, the source batch properties map to event frame data: Source UnitProcedure Property Event Frame Field Event Frame Attribute Reference Element BatchID BatchID UnitProcedure Name Name Procedure Product Product Start Time Start Time End Time End Time Unit Unit In addition to batch ID, procedure and product attributes, the interface records recipe and report events in event frame attributes. For these events, the attribute name is assigned from the [DESCRIPTION] column, the value from the source [PVALUE] column, and units of measure from the [EU] column. Unit procedure-level event frame properties do not change if the parent object is a merged event frame. By default, unit procedure event frames contain the batch ID and procedure name read from the data source. (To override the default, use PI Event Frame Interface Manager to configure the Batch ID mask field on the Batch Settings page.) When operation or phase-level recipes are run, the interface uses the operation or phase name as the name of the unit procedure-level event frame. Operation The interface creates an operation-level event frame for each operation read from the data source. Each operation-level event frame is a child of the unit procedure-level event frame and contains the subset of event frames that represent the source batch phase-level recipe. The name field of the operation-level event frames is the operation name read from the data source. The following table shows how the source batch properties map to event frame attributes: Source Operation Property Event Frame Field Reference Element Operation Name Name Start Time Start Time End Time End Time Unit Unit By default, the interface records recipe value and report events in event frame attributes. For these events, the attribute name is assigned from the [DESCRIPTION] column, the value from the source [PVALUE] column, and units of measure from the [EU] column. Phase The interface creates a phase-level event frame for each phase read from the data source. Each phase-level event frame is created as a child of an operation-level event frame and contains the subset of event frames that represent the source batch phase states-level recipe. The name field of the phase-level event frame contains the phase name read from the data source. The following table shows how the source batch properties map to event frame attributes: Source Phase Property Event Frame Field Reference Elements Phase Name Name Start Time Start Time End Time End Time Unit Unit Phase Module Phase Module By default, the interface records recipe value and report events in event frame attributes. For these events, the attribute name is assigned from the [DESCRIPTION] column, the value from the source [PVALUE] column, and units of measure from the [EU] column. Phase State The interface creates a phase state-level event frame for each phase state read from the data source. Each phase state-level event frame is created as a child of a phase-level event frame and, if so configured, can contain the subset of event frames that represent the phase steps. The start of new phase state ends the previous one, unless the new state is COMPLETE, ABORTED or STOPPED, which end the current phase state without beginning a new one. These phase states have a zero-duration time frame. The name field of the phase state event frames reflects an actual source recipe phase state name. Below is the mapping of source phase state to event frame fields and attributes: Source Phase State Property Event Frame Field Referenced Element Phase State Name Start Time Start Time End Time End Time Unit Unit Operation Module Operation Module Phase Module Phase Module Phase Step"
  },
  "content/batch-interface-framework/how-batch-interfaces-work/how-batch-data-is-stored/how-batch-data-is-stored.html": {
    "href": "content/batch-interface-framework/how-batch-interfaces-work/how-batch-data-is-stored/how-batch-data-is-stored.html",
    "title": "How batch data is stored",
    "keywords": "How batch data is stored <!-- Customized for syncade --> PI Interface for Emerson Syncade Batch stores batch data as PI AF event frames. The interface represents equipment by creating PI AF assets. PI AF event frames and elements provide a highly flexible, general-purpose structure that enables you to define your asset model and event hierarchy as you wish. Event frames do not restrict the number of unit batches that can be active in the same unit at the same time."
  },
  "content/batch-interface-framework/how-batch-interfaces-work/how-batch-data-is-stored/how-to-merge-multiple-source-batches.html": {
    "href": "content/batch-interface-framework/how-batch-interfaces-work/how-batch-data-is-stored/how-to-merge-multiple-source-batches.html",
    "title": "How to merge multiple source batches",
    "keywords": "How to merge multiple source batches <!-- Static topic. No modifications usually required --> To merge multiple source batches that have identical batch IDs, enable the Merge multiple source batches with same batch ID into one PI batch option on the Merge Setup tab of the PI Event Frame Interface Manager. To ensure that related batch IDs match, you can configure a batch ID mask that extracts a common substring from the incoming ID. The interface caches batches and, when it reads a new batch from the source, it checks its cache for a batch with a matching ID. If a match is found, the interface merges the batches. If no match is found in the cache, the interface creates a new batch. By default, the interface caches batches for one day. To configure the cache duration, go to the Time Settings tab and set the Cache time value. Configuring the Batch ID for Merging Multiple Batches To enable the interface to merge multiple incoming source batches into a single batch, you must ensure that the batch IDs are identical. To override the default batch ID that the interface reads from the data source, you can configure a batch ID mask that extracts a common substring of the incoming ID to be used as the batch ID. The mask must match a contiguous substring from the incoming batch ID (that is, you cannot define a mask that skips characters). To configure the mask using PI Event Frame Interface Manager as follows: on the Merge Setup tab, set the Batch ID mask field. Specify the mask using fixed text and the following wildcards: Wildcard Description # Single digit numerical value, 0-9 @ Single alpha character, a-z, A-Z ? Any single symbol ! Repeat the previous mask symbol * Any set of symbols You can specify multiple masks as a comma-separated list. The interface uses the result from the first mask that successfully generates a substring. If the interface cannot match the mask to the data in the incoming field, the entire field is used. As an example, for a data source BatchID column that contains the text lot30112 / 90dev123 / 12345stp / ld567 , the following table lists masks and results: Mask Result Matches… ##### 30112 The first five contiguous digits. The first matching substring is used. ### 301 The first three contiguous digits. @@@##### lot30112 Five contiguous digits with three contiguous characters and the characters are placed before the sequence of digits. ##@@@### 90dev123 Five contiguous digits with three contiguous characters and the characters are placed before the third digit. #####@@@ 12345stp Five contiguous digits with three contiguous characters and the characters are followed the digits. ????? lot30 The first five characters, regardless of type."
  },
  "content/batch-interface-framework/how-batch-interfaces-work/how-batch-data-is-stored/linking-BES-to-MES-batches-using-event-frames.html": {
    "href": "content/batch-interface-framework/how-batch-interfaces-work/how-batch-data-is-stored/linking-BES-to-MES-batches-using-event-frames.html",
    "title": "Linking BES to MES batches using event frames",
    "keywords": "Linking BES to MES batches using event frames <!-- Static topic. No modifications usually required --> To consolidate the output of a manufacturing execution system (MES) and a batch execution system (BES), specify the linking element as follows: Open PI Event Frames Interface Manager. Click the Batch Setup tab. For MES interfaces, enable the Link to child event frames option, and specify the path to the PI AF element. For BES interfaces, enable the Link from parent event frames option, and specify the path to the same PI AF element. This configuration is typical in an environment where an MES supervises multiple batch execution systems to manufacture a single product. For each BES, configure a dedicated interface instance and specify the same PI AF linking element. When an event frame created by the MES interface references the creation of a batch in the BES, a reference is made to the MES event frame in the linking element. Then, when the BES interface creates its event frame, a reference to it is created in the MES event frame, creating a consolidated view of all the related events from different systems. For example, the following figure illustrates an event frame created based on a batch from an Emerson DeltaV batch execution system. This event frame is referenced in an event frame created by a Werum PAS-X MES. Other batch interface instances that are configured to use the same linking element create references to their batches under the same link. The .ini file code for creating those event frames looks like this example: HOST=jshearouse5520 PS=EMDVBCS ID=998 AFHOST=jshearouse5520 AFDATABASE=EMDVBCS DB=2 Source[1].msmqpath=jshearouse5520\\private$\\historian2 Source[1].websrvpath=example.com WRITELINK=\\\\LINKPARENT\\LINKTEST"
  },
  "content/batch-interface-framework/how-batch-interfaces-work/how-batch-data-is-stored/the-pi-batch-database.html": {
    "href": "content/batch-interface-framework/how-batch-interfaces-work/how-batch-data-is-stored/the-pi-batch-database.html",
    "title": "The PI Batch Database",
    "keywords": "The PI Batch Database The PI Module and Batch Databases are used to organize and store batch data. Each object in the PI Batch Database represents a specific level of the S88 Recipe Model. To represent recipes, unit procedures, operations, phases, phase states and phase steps, the interface creates PIBatches, PIUnitBatches and a hierarchy of PISubBatches in the PI Batch Database. In the PI Batch Database, each level of the hierarchy is recorded as a module. All levels record their start and end time. PIBatch and PIUnitBatch record the batch ID. In a PIBatch, the Recipe property contains the recipe name. In a PIUnitBatch, the Procedure property contains the name of the corresponding recipe level. If the highest level that a recipe contains is an operation or phase (that is, neither the procedure nor unit procedure levels are defined), the interface creates a parent PIBatch and PIUnitBatch. By default, the interface creates a set of properties for each level of the hierarchy to contain data relevant to that level, depending on the data provided by the BES. The root property node is named using the batch ID. To override the default properties for a specific level of the recipe hierarchy, use the Event Frame Manager configuration tool to add the default recipe templates and then alter them as needed. To create properties that are not level-specific, define property templates. Events of interest are stored in lists under the appropriate recipe node. Each property under the same node must have a unique name. By default, each property is named Event_<event count> , where <event count> is the current number of events already stored under a specific node. The PIProperty value can be configured using property templates. To view batches in the PI Batch Database, use the PI System Management Tools Batch > Batch Database option. The following sections describe how the different levels of the batch hierarchy are stored in the Batch Database. PIBatch The interface creates a PIBatch for each batch found in the data source. The PIBatch corresponds to the procedure in the recipe. Each PIBatch contains one or more PI UnitBatches that correspond to the unit procedures in the recipe. Multiple source batches that have identical IDs or a common subset of characters in their ID can be merged into a single PIBatch. The product and recipe properties contain data associated with the first source batch that started the merged PIBatch. The original source batch properties are stored in PIProperties under a node named using the unique ID of the source batch. For each merged source batch, the interface creates a node that is named using the unique ID of the source batch containing the original properties. Because a source batch can terminate unexpectedly without proper unloading by the operator, the interface caches batches in local memory for a timeout period, after which the batch is considered abandoned. The interface closes abandoned batches by assigning end time using the latest known timestamp for the batch. The default timeout is 100 days. To change the default timeout, edit the interface settings using PI Event Frame Interface Manager. PIUnitBatch A PIUnitBatch is created for each unit procedure recorded in the data source. The start and end times of a PIUnitBatch are intended to reflect the start and completion of physical processing in a unit, so they require both a start event and an \"equipment acquired\" event. The unit batch ends when an \"end\" event or an \"equipment released\" event is detected. By default, PIUnitBatches contain the batch ID and procedure name from the data source. To override the default, use PI Event Frame Interface Manager to edit the settings. When operation or phase-level recipes are run, the interface uses the operation or phase name as the PIUnitBatch procedure name. If unit procedures on the same unit overlap, the interface closes the conflicting PI UnitBatches. The actual end time for a truncated unit batch is stored in its product property, and the product is appended with the text \"_TrueEndUTC=\", followed by the actual end time of the unit batch, specified as UTC in seconds. PISubBatches (Operation, Phase, Phase State and Phase Step) In the batch database, all levels below unit batches are recorded using a hierarchy of subbatches, as follows: Operation : The interface creates a PISubBatch for each child of a unit batch encountered in the data source. Phase : The interface creates a PISubBatch for each child of an operation encountered in the data source. Phase State : The interface creates a PISubBatch for each child of a phase encountered in the data source. The start of new phase state ends the previous phase state, except for the COMPLETE, ABORTED and STOPPED states, which set only the end time. Phase Step : You can configure the interface to create a PISubBatch for each child of a phase state encountered in the data source. Subbatches populate parent levels of the hierarchy with the name of the source operation, phase, phase state and phase step as required. Phase steps are not S88-compliant and support for phase steps varies among BES vendors. (ABB800xA, Foxboro IA Series, Siemens SIMATIC, and WonderWare InBatch do not support phase steps.) Phase steps are created beneath the first phase state subbatch named \"RUNNING\", regardless of whether the parent phase state is ended. The name of phase step start and stop events is read from the data source DESCRIPT column. The triggering event is \"Report\". If the parent phase is not found, phase steps do not trigger the creation of PIBatches, UnitBatches and SubBatches. If the phase step is not explicitly closed by an appropriate event, the interface closes it using the end time of its parent operation. Zero-duration phase steps are ignored."
  },
  "content/batch-interface-framework/how-batch-interfaces-work/how-batch-interfaces-work.html": {
    "href": "content/batch-interface-framework/how-batch-interfaces-work/how-batch-interfaces-work.html",
    "title": "How batch interfaces work",
    "keywords": "How batch interfaces work <!-- Static topic. No modifications usually required --> Batch interfaces scan a data source for events of interest, such as the start or end of a level, and the acquisition and release of equipment. Based on these events, the interface generates entries in the PI Batch Database or event frames. To handle configurations in which multiple batch execution systems manage related batch processes that you want to merge, you can configure a single interface instance to read multiple data sources."
  },
  "content/batch-interface-framework/how-batch-interfaces-work/how-interfaces-process-batch-event-data.html": {
    "href": "content/batch-interface-framework/how-batch-interfaces-work/how-interfaces-process-batch-event-data.html",
    "title": "How batch interfaces process event data",
    "keywords": "How batch interfaces process event data <!-- Static Content. Usually requires no modification. --> The interface processes start and end events for each level. The level at which a recipe executes depends on the equipment it requires. For example, a batch-level recipe is most likely composed of unit procedures and procedures executed on multiple different units. By contrast, an operation-level recipe might execute a set of phases in a single unit. The interface automatically creates PIBatches (or level 1 events) and PIUnitBatches (or level 2 events) for operation- and lower-level recipes, even though the events in the data source do not include these levels. The BES events that trigger the start and end of each level are vendor-specific. For details, refer to the vendor-specific information in this document. When you configure the interface to generate event frames in PI AF, the interface creates a set of event frame templates in the target database, one template for each level in the standard S88 batch hierarchy. You can modify the templates to customize the data that is stored in the generated event frames. The interface creates equipment assets in the Module Database or PI AF (depending on where you're storing batch data) based on allocation events from the BES, and populates the attributes of those assets with relevant data. Caution : To ensure compatibility with RtReports, any custom Event Frame batch template used must be derived from a default Batch Interface Event Frame Template."
  },
  "content/batch-interface-framework/how-batch-interfaces-work/interface-modes.html": {
    "href": "content/batch-interface-framework/how-batch-interfaces-work/interface-modes.html",
    "title": "Interface modes",
    "keywords": "Interface modes <!-- Static topic. No modifications usually required --> PI Interfaces for Batch and Manufacturing Execution Systems can be run in five different modes: RealTime (default) Recovery Preprocess Statistics Delete RealTime mode In RealTime mode, the interface monitors the data source for events that indicate the start or end of a batch or any child level thereof, recording these events in the PI System according to your batch configuration. The interface records newly-acquired data at the end of each scan regardless of whether batches are completed on the source. At startup, before it begins real-time data collection, the interfaces attempts to recover any data written after it was shut down. Recovery mode To recover events that occurred during interface downtime, the interface scans the data source for a specified period. If you omit an end time or specify * (current time), the interface recovers data and then starts collecting data in RealTime mode. If you specify an end time, the interface recovers data for the specified period and then exits. To ensure that history is recovered as completely as possibly, specify an end time of * (current time). In recovery mode, the interface reads batch data from the data source for the specified time period. This mode can be used to initialize the PI System with historical data from the data source. If batch data for the specified period already exists in the PI System and the interface detects discrepancies, it attempts to correct the PI System data, logging any errors. For example, the following figure shows a data source that contains batch data for seven batches. If you recover data for the period from 12/15/2007 16:00:00 through 05/11/2008 2:00:05, the interface recovers contained batches (Batch 4 and 5) as well as border batches (Batch 1, Batch 3 and Batch 6). Batches outside the time frame (Batch 2 and 7) are not recovered. Preprocess mode If your data source contains data with timestamps that are earlier than the period covered by the primary archive, you can recover events by running the interface in Preprocess * mode, which scans the data source and creates the required tags, modules and units in the PI System. After running the interface in Preprocess mode, you must reprocess older archives to create entries for the tags, modules and units, then run the interface in recovery mode. This process is also referred to as \"backfilling\". (See the Backfill existing archives from new PI points for details on reprocessing archives.) Note: For version 4 batch interfaces running with PI server version 390 or later, preprocessing is not required before recovering data. Statistics mode In Statistics mode, the interface scans a specified period, comparing data from the data source with the corresponding data in the PI Batch database. After comparing data, the interface reports the results and exits. If you omit an end time, the interface scans from the specified start time until the current time. To run the interface in Statistics mode using PI Event Frames Interface Manager, go to the Operation Settings tab, choose Statistics mode and specify the start and end times for the period to be analyzed. The interface logs results to the specified output file and exits. Delete mode In Delete mode the interface will delete batch data from the PI Batch Database or from event frames for a time period specified by start and end times. To run the interface in Delete mode using PI Event Frames Interface Manager, go to the Operation Settings tab, choose Delete mode and specify the start and end times for the period to be deleted. To delete data through the current time, omit the end time. If you intend to recover events from the data source for a specified time period, consider deleting existing batch data for that time period first."
  },
  "content/batch-interface-framework/how-batch-interfaces-work/templates-for-mapping-data-source-events/filter-incoming-events.html": {
    "href": "content/batch-interface-framework/how-batch-interfaces-work/templates-for-mapping-data-source-events/filter-incoming-events.html",
    "title": "Filter incoming events",
    "keywords": "Filter incoming events You can configure filters to restrict the interface from processing certain events. You can filter out data based on its level in the batch hierarchy and on its unit. The interface examines fields in incoming events for the specified data and, if it matches, the event is not processed. To exclude incoming data from processing using PI Event Frames Interface Manager, go to the Filters tab. Expand the setting for the type of data that you want to filter (phases, units, recipes or phase states). Specify the data that you want to exclude. You can use wildcards to define masks for matching."
  },
  "content/batch-interface-framework/how-batch-interfaces-work/templates-for-mapping-data-source-events/link-templates.html": {
    "href": "content/batch-interface-framework/how-batch-interfaces-work/templates-for-mapping-data-source-events/link-templates.html",
    "title": "Link templates",
    "keywords": "Link templates DCS Link Templates associate event frames from one interface to another. To create links, you define link templates on the Templates page of the PI Event Frame Interface Manager. The link templates specify events that contain link data and the naming of the destination event frame. Placeholders, wildcards and advanced parsing features enable you to extract precisely the desired data from the events that the interface reads from the data source. Triggers on the template define the events with linking information and the value specifies the name of the destination batch level event frame. To define a link template on the Templates page of the PI Event Frame Interface Manager, configure the following settings: Setting Description Value The name of the destination batch level event frame. Trigger The event that triggers the generation of the property. Updates can be triggered by the data source or by PI events such as the start or end of a recipe level. Examples To link an event frame that has an event where Descript is WorkflowID to a batch level event frame whose name is held in Pval in the same event, configure the template with the following settings: Setting Set to Value [Pval] Trigger [Descript, value=\"WorkflowID\"]"
  },
  "content/batch-interface-framework/how-batch-interfaces-work/templates-for-mapping-data-source-events/placeholders-and-advanced-parsing.html": {
    "href": "content/batch-interface-framework/how-batch-interfaces-work/templates-for-mapping-data-source-events/placeholders-and-advanced-parsing.html",
    "title": "Placeholders and advanced parsing",
    "keywords": "Placeholders and advanced parsing Placeholders enable you to incorporate data from incoming events into tag names and data. Placeholders can be used in all types of templates. The precise set of placeholders supported by an interface depends on the data source. The following example illustrates how placeholders correspond to columns in a data source. When you define templates using the PI Event Frame Interface Manager, you can choose from a list of supported placeholders. To use a placeholder in a field when editing a template, click the Add Placeholder button and choose the desired placeholder. You can define placeholders that read data from PI tags when triggered by batch events. To specify a tag-based placeholder, use the following syntax: [Tag, Name=\"PI Tag Name\", <comma-delimited list of parameters>] For example: total:[Tag, name=\"sinusoid\", range=\"10d\", func=\"TOTAL\"] min:[Tag, name=\"test_data_1\", range=\"10d\", func=\"MIN\"] The following table describes the components of a tag-based placeholder. Parameter Description Name=\"tagname\" (Required) Defines the exact name of the PI tag which should be used for data retrieval. Range=\"data_range\" (Optional) Defines the time frame for which the data is queried. It can be number of events, time frame or \"PIOBJECT\". \"PIOBJECT\" instructs the interface to use the time frame of the related PI batch/unitbatch/subbatch object. Examples: Range=\"10\": Retrieve the ten events that precede the triggered batch event timestamp. Range=\"10d\": Retrieve the events for ten days from the triggered batch event timestamp. Range=\"PIOBJECT\": Retrieve the events between the start and end times of the related batch object. Func=\"option\" (Optional) Used with Range to aggregate retrieved data. Options: • \"MIN\": Minimum value in the time frame. • \"MAX\": Maximum value in the time frame. • \"TOTAL\": Sum of values in the time frame. • \"MID\": Average of values in the time frame. Following are wildcards, which you can use to define a mask for template settings and placeholders, to match incoming data and format data to be written to the PI System. Wildcard Description # Single digit numerical value, 0-9 @ Single alpha character, a-z, A-Z ? Any single symbol ! Repeat the previous mask symbol * Any set of symbols For example, to match any event that starts with \"Repo\", use the * wildcard as follows: [EVENT, VALUE=\"Repo*\"]. The interface supports a set of parameters that provide fine control over how incoming data is parsed. These advanced parsing parameters can be used in all types of templates. To enable you to incorporate these parsing parameters into a placeholder expression, the Build a Placeholder dialog provides an Add Substring Parsing option. If you specify parsing parameters for one or more placeholders and no matching data is found, the entry is set to blank. The following table lists the parameters for parsing incoming data. The names of parameters, placeholders, and value substrings are not case-sensitive. Parameter Description LBE=ʺsubstringʺ Defines the left bound of the target substring value. The resulting substring does not include the specified substring. LBI=ʺsubstringʺ Defines the left bound of the target substring value. The resulting substring includes the specified substring. RBE=ʺsubstringʺ Defines the right bound of the target substring value. The resulting substring does not include the specified substring. RBI=ʺsubstringʺ Defines the right bound of the target substring value. The resulting substring includes the specified substring. DELIM=ʺsubstringʺ Specifies the field separator character or substring. Must be used in conjunction with the COUNT parameter. It narrows the results to the substring contained in delimiters, where the starting delimiter index is specified by the COUNT parameter. To parse the delimited substring, you can specify right and left boundary substrings. COUNT=# Index (position) of the delimiter from which to start parsing. Must be used in conjunction with the DELIM parameter. To search all fields of an incoming event, specify a wildcard for the placeholder name (for example [*,lbe=\"u:\"]). The following table lists examples of parsing a field that contains the following data: |U:browntod|C:SP_CHARGE_AMOUNT|O:1200|N:1123|E:kg|M:Local Example Resulting Data [value, lbe=ʺN:ʺ] 1123 [value, lbi=ʺN:ʺ] N:1123 [value, rbe=ʺtodʺ] [value, rbi=ʺtodʺ] U:browntod [value, lbe=ʺU:ʺ, rbe=ʺ ʺ] [value, lbi=ʺU:ʺ, rbe=ʺ ʺ] [value, lbe=ʺO:ʺ, rbi=ʺkgʺ] 1200 [value, delim=ʺ ʺ,count=3] O:1200 [value, delim=ʺ ʺ,count=3,lbe=ʺO:ʺ] [value, delim=ʺ ʺ,count=3,lbe=ʺC:SPʺ,rbe=ʺUNTʺ] [value, delim=ʺ ʺ,count=6,lbe=ʺM:ʺ] PIEVENT placeholders These placeholders are supported for expression triggered by PI batch events (Parameter, value=\"PIEVENT\"]). Place Holder Batch Level How Batch Database is Stored How Event Frames are Stored [BATCHID] 1 or 2 String value that is stored as PIBatch BatchID and PIUnitBatch BatchID property Top-level event frame: Name property Second-level event frame: BatchID attribute. [PROCEDURE] 1 PIBatch Recipe property Top level event frame Recipe Attribute [UNITPROCEDURE] 2 PIUnitBatch Procedure property Name property [OPERATION] 3 PISubBatch Name property Name property [PHASE] 4 PISubBatch Name property Name property [PHASESTATE] 5 PISubBatch Name property Name property [PHASESTEP] 6 PISubBatch Name property Name property [UNIT] n/a PIModule Name property PI AF element Name property. For example, to update a PI tag when a PI batch is started or ended, specify the following tag templates: Tag[1].Name=BESName:PIEvent.Batch.Active Tag[1].Value=BATCH START: [BATCHID] |Prod: [PRODUCT] |Rec: [PROCEDURE] Tag[1].Trigger=[EVENT,value=\"PIEVENT\"] [DESCRIPT, value=\"BATCH\"] [PVAL,value=\"START\"] Tag[2].Name=BESName:PIEvent.Batch.Active Tag[2].Value=BATCH END: [BATCHID] |Prod: [PRODUCT] |Rec: [PROCEDURE] Tag[2].Trigger=[EVENT,value=\"PIEVENT\"] [DESCRIPT, value=\"BATCH\"] [PVAL,value=\"END\"]"
  },
  "content/batch-interface-framework/how-batch-interfaces-work/templates-for-mapping-data-source-events/property-templates.html": {
    "href": "content/batch-interface-framework/how-batch-interfaces-work/templates-for-mapping-data-source-events/property-templates.html",
    "title": "Property templates",
    "keywords": "Property templates <!-- Topic requires customization for specific interface --> Properties associate data from the data source with a desired level of the batch or event frame hierarchy. To create properties, you define property templates on the Templates page of the PI Event Frame Interface Manager. The property templates specify the data to be extracted and the level of the hierarchy at which they are created. Placeholders, wildcards and advanced parsing features enable you to extract precisely the desired data from the events that the interface reads from the data source. With event frames, properties (AF attributes) can be created at any level of the batch hierarchy. However, in the batch database, properties are stored only at the top (procedure or batch) level of the batch hierarchy. This top-level collection of properties includes the properties for the lower levels of the batch hierarchy, arranged according to level. To define a property template on the Templates page of the PI Event Frame Interface Manager, configure the following settings: Setting Description Index Unique numeric ID (integer). Name Property name. Every event name under the same node must be unique. If the template does not define a name, the interface assigns a default name of Event_<n> , where <n> is a unique integer. To write properties at the top level regardless of the level from which the triggering event originated, specify the @ symbol as the first element in name path as follows: @\\[Parameter] . To write properties under the UniqueID property (PI Batch only), regardless of the level from which the triggering event originated, specify the $ symbol as the first element in name path, as follows: $\\[Parameter] . Value Value to assign to property. Create property Specifies the level at which the property is to be created. Options are as follows: • At recipe level: By default, properties are created at the recipe level corresponding to the level in the data source from which the data was read. • Under root node: Create properties at the top level of the batch or event frame hierarchy, regardless of the level at which they originated. • Under UniqueID node: (Batch database only, not event frames) Create properties under the batch's UniqueID node. Data type PI data type of the value. Note that if the incoming value is incompatible with the specified type, the event is not processed, and an error is logged. Trigger The event that triggers the generation of the property. Updates can be triggered by the data source or by PI events such as the start or end of a recipe level. Translate Specifies whether the property is to be translated before being written to the PI System. Specify true or false (default is false). EngUnits (AF only) Engineering units Type INTEGER , FLOAT , STRING (Default), FLOATSTRING , AUTO . If Type is set to AUTO , the interface assigns the data type based on the first item of data that it receives. If the first value received is an integer but subsequent values are floating point, the interface creates an integer attribute or property and truncates any subsequent floating point values before storing them. To avoid truncating numeric input that includes a mix of integer and floating point values, specify FLOATSTRING rather than AUTO . Category (AF only) Asset category UOM (AF only) Unit of measure. To map the units of measure in the data source to the correct PI AF engineering units, check the UOM check box and configure the mapping between the source units of measure and the units available in PI AF. Descriptor (AF only) Description. Tagpath The path to a PI Server tag. For example: \\\\MyPIServer\\sinusoid . This will create an attribute that has a data reference to a PI point. Allowemptyvalue If true, the attribute will be created with an empty value. If false, and the value is empty, the attribute will not be created. Examples To create or update a property named TestTagCalc that contains a ten-day total for the \"sinusoid\" tag and a ten-day minimum for the \"test_data_1\" tag, configure the template with the following settings: Setting Set to Name TestTagCalc Value total:[Tag, name=\"sinusoid\", range=\"10d\", func=\"TOTAL\"] Trigger [Event,value=\"PIEVENT\"] [Descript,value=\"BATCH\"] [Pval,value=\"START\"] To populate the product property with the formula name when a \"Recipe header\" event arrives, ignoring undefined product codes, use the following settings: Setting Set to Product [PVAL] ProductTrigger [EVENT,VALUE=\"Recipe Header\"] [DESCRIPT,VALUE=\"Product Code\"] [PVAL, VALUE!=\"UNDEFINED\"] ProductTrigger [EVENT,VALUE=\"Formula Header\"] [DESCRIPT,VALUE=\"Formula Name\"]"
  },
  "content/batch-interface-framework/how-batch-interfaces-work/templates-for-mapping-data-source-events/recipe-template-examples.html": {
    "href": "content/batch-interface-framework/how-batch-interfaces-work/templates-for-mapping-data-source-events/recipe-template-examples.html",
    "title": "Recipe template examples",
    "keywords": "Recipe template examples Configure the batch name as the concatenation of the procedure and unique ID fields from the data source, and name operations by concatenating the parent unit procedure name with the operation name: Recipe[1].Name = [Procedure]_[UniqueID] Recipe[3].Name = [UnitProcedure]_[Operation] Assign the PI AF category \"CAT_UNITBATCH\" to all unit procedures. Note that, if the specified category has not been defined in PI AF, the interface creates it. Recipe[2].Category = CAT_UNITBATCH Dynamically assign categories based incoming data: Recipe[1].Category[1].Name = PROC_A Recipe[1].Category[1].Trigger = [Procedure, value=\"DVProc:1-*\"] Recipe[1].Category[2].Name = [Pval] Recipe[1].Category[2].Trigger = [Descript, value=\"Product Code\"] When creating event frames for unit procedures (level 2), use the corresponding template: Recipe[2].Template = OSI_UnitProcedure Dynamically assign templates based incoming data: Recipe Template Example 5: Recipe[2].Template[1].Name = UP_A Recipe[2].Template[1].Trigger = [UnitProcedure, value=\"UProc:1-*\"] Recipe[2].Template[2].Name = UP_B Recipe[2].Template[2].Trigger = [UnitProcedure, value=\"UProc:2-*\"]"
  },
  "content/batch-interface-framework/how-batch-interfaces-work/templates-for-mapping-data-source-events/recipe-templates.html": {
    "href": "content/batch-interface-framework/how-batch-interfaces-work/templates-for-mapping-data-source-events/recipe-templates.html",
    "title": "Recipe templates",
    "keywords": "Recipe templates The interface includes a set of built-in default recipe templates that control the name assigned to each level in the batch hierarchy and the data stored at each level. To override the naming convention and data assigned to PI batches, unit batches, subbatches and event frames, you define recipe templates. To define recipe templates, launch the Event Frames Interface Manager and perform the following steps. Go to the Templates page and navigate to the list of recipe templates. Right-click the top Recipe node and choose Add Default Templates . A list of default recipe templates is displayed. For the recipe levels that you want to modify, configure basic settings as follows: NAME (Required) Defines the convention used by the interface to assign names to procedures, unit procedures, etc. You can use the advanced parsing parameters to define this field. Example: abc_[PROCEDURE]. If the procedure field of the incoming event contains \"Test\", the resulting name is \"abc_Test\". BATCHID (Optional) Specifies the batch ID for the procedure or unit procedure. MODULEPATH (Optional) For unit procedures (level 2) or phase (level 4), specifies where the recipe resides in the PI Module Database or PI AF element hierarchy. In the Module Database, the path specifies the location of the PIUnit for the unit batch. PRODUCT (Optional) Set the product for the recipe. Sets the Product field for procedures and unit procedures. To set the product field to the value read from the data source, specify the following placeholder: [PRODUCT] PRODUCTTRIGGER (Optional) Sets the product for the recipe after the recipe object is created. Intended for use when the product is defined in a separate event. If a product trigger is defined, the product is defined by the event that satisfies the trigger. If no product trigger is defined, the product gets its value from the event that created the recipe, and the template is populated by the event's placeholder data. Example: [Parameter, Value=\"Recipe Header\"] [Descript, value=\"Product Name\"] TRANSLATE (Optional) To enable translation, set to TRUE. Default: FALSE MERGE (Optional) To merge identically-named objects under the same parent, set to TRUE. Default: FALSE | The following placeholders are supported: AREA BATCHID DESCRIPT EU EVENT OPERATION PHASE PHASEMODULE PHASESTATE PHASESTEP PROCEDURE PROCESSCELL PVAL UNIQUEID UNIT UNITPROCEDURE USERID [*,value= \"Field\"] [*,value= \"mask\"] For event frames, you can configure the following additional settings. Descriptor (Optional) Specifies the Event frame descriptor property for the particular source Recipe object. DefaultProperty[x].Name (Optional) Name of the event frame template attribute. Valid values are Recipe, BatchID, Product and Procedure. Interface defined defaults place Recipe and BatchID at x=1, Product at x=2, and Procedure at x=3. DefaultProperty[x].Value (Optional) Defines the event attribute expression that evaluates to a valid value. DefaultProperty[x].Trigger (Optional) Defines the expression that specifies which event(s) to use to get the value. [Event,value=\"Recipe Header\"][descript,value=\"Product Code\"] DefaultProperty[x].UseFirstValue (Optional) Use the first matching event for the event frame to get the value if set to T or True. The default behavior is to use the last matching event. Category (Optional) For each recipe level, defines the event frame category. If the event that creates an event frame contains insufficient information, no category is assigned. To assign a category to an event frame after its creation, use Category[x]. Category[x].Name (Optional) For each recipe level, define the event frame category based on an event that is related to the particular recipe item. This setting can create as many categories as desired. The index is a positive integer that associate the Name and Trigger subproperties for the specific Category[x] property. If the AF category does not exist, the interface creates it. To use this setting, you must also specify the triggering event using the Recipe[#].Category[x].Trigger setting. Example: When the specified trigger event arrives, create an event frame, assigning it the SCR category. Category[10].Name = SCRCategory[10].Trigger = [Descript, value=\"Formula Name\"] [Pval, value=\"SCR 20051\"] Category[x].Trigger (Optional) Defines the expression that triggers assignment of a category by the Recipe[#].Category[x] setting. There can be multiple triggers for a single Recipe[#].Category[x].Name. To use this setting, you must also specify the category to be assigned, using the Recipe[#].Category[x].Name setting. Example: When any of the specified trigger event arrives, create an event frame, assigning it the SCR category. Category[10].Name = SCR Category[10].Trigger = [Descript, value=\"Formula Name\"] [Pval, value=\"SCR 20051\"] Category[10].Trigger = [Descript, value=\"Formula Name\"] [Pval, value=\"SCR 20051_01\"] Category[10].Trigger = [Descript, value=\"Formula Name\"] [Pval, value=\"SCR 20051_02\"] Template (Optional) For each recipe level, specify the event frame template. If the interface cannot find a matching event frame template, the template is left blank. To assign a template to an event frame after its creation, use the Template[x] property. Recipe[#].Template[x].Name (Optional) For each recipe level, this dynamic property enables you to define the event frame template. Based on any event that is related to particular recipe item. This property can assign only one AF template to a particular event frame. The interface uses the first matching Recipe[#].Template[x] property to be assigned to an event frame. The index is a positive integer that associates the Name and Trigger subproperties for the Template[x] property. If you specify this property, you must specify the Trigger property. Example: Template[10].Name = BATCH_A Template[10].Trigger = [Descript, value=\"Formula Name\"] [Pval, value=\"SCR 20051\"] Recipe[#].Template[x].Trigger (Optional) This property defines the triggering expression for the event frame template. There can be multiple triggers for a single recipe template. If you specify this property, you must specify the Name property. Example: Template[10].Name = BATCH_A Template[10].Trigger = [Descript, value=\"Formula Name\"] [Pval, value=\"SCR 20051\"] Template[10].Trigger = [Descript, value=\"Formula Name\"] [Pval, value=\"SCR 20051_01\"] Template[10].Trigger = [Descript, value=\"Formula Name\"] [Pval, value=\"SCR 20051_02\"] To save your changes, click Save Settings in the left pane."
  },
  "content/batch-interface-framework/how-batch-interfaces-work/templates-for-mapping-data-source-events/tag-template-examples.html": {
    "href": "content/batch-interface-framework/how-batch-interfaces-work/templates-for-mapping-data-source-events/tag-template-examples.html",
    "title": "Tag template examples",
    "keywords": "Tag template examples Capture report events for phase modules Tag template Tag[1].Name =[Unit] [phasemodule] [Event, value=\"Report\"] Tag[1].Value =[Descript]:[Pval]:[EU]-[Event]_Just for testing Tag[1].Type = string Tag[1].unitalias=[phasemodule] Report Tag[1].phasealias=Report Tag[1].Annotation=[BatchID] Incoming data [BatchID]=Batch_123 [Time]=08/12/2008 13:00:05.123 [Descript]= Level [Pval]=123.456 [EU]=cm [Event]=Report [Unit]=U101 [PhaseModule]=PDL123 Resulting PI point: U101 PDL123 Report Resulting event added to PI point: Timestamp: 08/12/2008 13:00:05.123 Value: Level:123.456:cm-Report_Just for Testing Annotation: Batch_123 The MDB module or PI AF asset for this phase module will have an alias that refers to this point. Multiple triggers for same tag Tag template Tag[1].Name = [Unit] Tester Tag[1].Value =[pval]-[Event] Tag[1].Type = string Tag[1].Trigger = [Event, value=\"Report\"] Tag[1].Trigger = [Event, value=\"State Change\"] Tag[1].Trigger = Comment Tag[1].unitalias = Testing [Unit] Tag[1].phasealias = Testing phase alias Incoming data Event 1: [Time]=08/12/2008 13:00:05.123 [Event]=Report [Unit]=U101 [Pval]=123.456 Event 2: [Time]=08/12/2008 15:20:01.998 [Event]=State Change [Unit]=U101 [Pval]=HOLDING Event 3: [Time]=08/12/2008 18:49:12.020 [Event]=Comment [Unit]=U101 [Pval]=Discard Product Resulting PI point: U101 Tester Resulting event added to PI point TimeStamp Value (string) 08/12/2008 13:00:05.123 123.456-Report 08/12/2008 15:20:01.998 HOLDING-State Change 08/12/2008 18:49:12.020 Discard Product-Comment Recording start and stop events The following tag templates store 1 when an operation or phase starts and 0 when it ends. Tag[1].Name = Activity on [Unit] [Pval] Tag[1].Value = 1 Tag[1].Type = integer Tag[1].Trigger = [Descript, value=\"Step Activated\"] [Event, value=\"Step Activity] [EU, value=\"Operation\"] Tag[1].Trigger = [Descript, value=\"Step Activated\"] [Event, value=\"Step Activity] [EU, value=\"Phase\"] Tag[2].Name = Activity on [Unit] [Pval] Tag[2].Value = 0 Tag[2].Type = integer Tag[2].Trigger = [Descript, value=\"Step Deactivated\"] [Event, value=\"Step Activity] [EU, value=\"Operation\"] Tag[2].Trigger = [Descript, value=\"Step Deactivated\"] [Event, value=\"Step Activity] [EU, value=\"Phase\"] Tag aliasing The following tag templates create tags corresponding to the aliases shown in the figure below. Tag[1].Name = Super Test1 [Unit] Tag[1].Value = [Event] | [Pval] Tag[1].Trigger = [Event,value=State Change] Tag[2].Name = Super Test2 [Unit] Tag[2].Value = [Event] | [Pval] Tag[2].Trigger = [Event,value=State Change] Tag[2].UnitAlias = stuff2\\[Event] | Super Testing2 Tag[3].Name = Super Test3 [Unit] [PhaseModule] Tag[3].Value = [Event] | [Pval] Tag[3].Trigger = [Event,value=State Change] Tag[4].Name = Super Test4 [Unit] [PhaseModule] Tag[4].Value = [Event] | [Pval] Tag[4].Trigger = [Event,value=State Change] Tag[4].UnitAlias = stuff4\\[Event] | Super Testing4 [PhaseModule] Tag[4].PhaseAlias = phasa4\\abc\\[Event] | Super Testing4 Tag[5].Name = Super Test5 [Unit] [PhaseModule] Tag[5].Value = [Event] | [Pval] Tag[5].Trigger = [Event,value=State Change] Tag[5].UnitAlias = NONE Tag[5].PhaseAlias = NONE Tag template example"
  },
  "content/batch-interface-framework/how-batch-interfaces-work/templates-for-mapping-data-source-events/tag-templates.html": {
    "href": "content/batch-interface-framework/how-batch-interfaces-work/templates-for-mapping-data-source-events/tag-templates.html",
    "title": "Tag templates",
    "keywords": "Tag templates <!-- Mark Bishop 6/18/21: Customized for Emerson Syncade --> This section details the procedure for configuring tag templates. The tables in steps 7 and 8 define specific tag template settings and configurations to ensure that tag templates capture updates to PI Batch Database. <!-- Step does not apply to Syncade 1. To create or update PI tags based on alarms read from an Emerson DeltaV Event Chronicle (alarms & events) data source, configure alarm tag templates. --> To create or update PI tags when specified events are read, configure tag templates. To define tag templates using PI Event Frame Interface Manager, go to the Templates page and click the Tag tab. To configure the name of the tag to be created or updated, specify the Name field. To assign tag names based on incoming data, use placeholders. For example, to track phase module report events on a per-unit basis, you might configure the name as follows: [Unit] [phasemodule] Report With the preceding template, when the interface reads a report event for the NORTON phase module on unit XUNIT_52003, it replaces the placeholders with data from the specified fields and creates or updates a PI tag with the following name: `XUNIT_52003 NORTON Report` If the name structure contains placeholders, the tag template is triggered only if all the corresponding fields from the incoming event contain data (that is, are not blank). Different templates can update the same PI tag, if the templates' name structure resolves to the same tag. This capability enables you to write different values to the tag depending on the nature of the triggering event. For example, a value of 1 can be written to the tag when a unit procedure starts and a value of 0 can be written to the same tag when the unit procedure ends. To specify the data to be written to the tag, configure the Value field. To include data read from the data source in the tag value, use placeholders. For example, to simply record the incoming value without transforming it, specify the [PVAL] placeholder. A more complex example: to configure a value that concatenates phase module, event, description, incoming value and engineering units, specify the following: [PHASEMODULE].[EVENT].[DESCRIPT]: [PVAL] [EU] The preceding expression generates data like the following: `CHARGE_DIW.Recipe Value.CPP_HIGH_LIMIT: 2535 kg` Unlike placeholders in tag names, value placeholders can be replaced with empty fields from the incoming event, unless you use advanced field parsing to configure the value. To update a tag when a particular event is read from the data source, specify the EVENT keyword in the Name field, as follows: [EVENT, VALUE=\"event_text\"] This approach enables you to write different values to the tag depending on the text in the EVENT column. If you require a more refined approach, specify the incoming data that causes the template to be evaluated by configuring one or more triggers on the **Trigger** tab of the tag template. To configure the template to handle multiple different events, specify separate triggers (\"OR\" logic). To ensure that the template is triggered only when a set of multiple conditions are all detected (\"AND\" logic), specify a single trigger containing all the conditions. For example, to trigger the template only for system message events that are phase logic failures, specify the trigger as follows: `[EVENT, value=\"System Message\"] [DESCRIPT, value=\"Phase Logic Failure\"]` To ignore specified incoming values, use \"!=\" (not equal) . For example, to ignore undefined values, specify the following expression: `[PVAL, VALUE!=\"UNDEFINED\"]` You can use wildcards to specify pattern-matching expressions in triggers. To configure the tag template settings, specify settings as described in the following table: Setting Description NAME (Required) Name of PI tag to be created or updated. VALUE (Required) Value to be assigned to PI tag (text) TRIGGER Event text from data source (can be specified using wildcards) TYPE String/integer/float/auto. \"Auto\" directs the interface to automatically detect the data type. UNITALIAS Configure how unit alias (AF: PI point reference) is created. By default, the alias is created in the unit. To override the default, specify the path where you want the alias created. For example: `UNITALIAS = \\Building1\\Unit2 PHASEALIAS Configure how the phase alias is created. By default, the alias is created in the phase module. To override the default, specify the path where you want the alias created. DESCRIPTOR Value for PI point descriptor attribute. ENGUNITS Engineering units TRANSLATE To enable translation, set to TRUE (default: FALSE) ANNOTATION Simple annotation to be written to the tag when the interface updates it. ANNOTATION2 Structured annotation to be written to the tag when the interface updates it. For details about structured annotations, refer to the PI Data Archive System Management Guide. To configure tag templates that catch events raised by the interface when it updates the PI Batch Database, specify the following placeholders in the TRIGGER setting of the tag template: Placeholder Values Description EVENT PIEVENT Specify [EVENT, value=\"PIEVENT\"] DESCRIPT BATCH UNITBATCH OPERATION PHASE PHASESTATE PHASESTEP Specify the batch level you want to trigger on. For example: [DESCRIPT, value=\"UNITBATCH\"] [DESCRIPT, value=\"PHASE\"] PVAL START END Specifies whether to catch the start or ending event of the specified level: [PVAL, value=\"START\"] [PVAL, value=\"END\"] For example, to detect the start of a batch, specify the following expression: [EVENT, VALUE=\"PIEVENT\"][DESCRIPT, VALUE=\"BATCH\"][PVAL, VALUE=\"START\"] The following placeholders are supported when the triggering expression contains [Parameter, value=\"PIEVENT\"]. Placeholder Batch Database Event Frames [BATCHID] PIBatch and PIUnitBatch: BatchID property. For a top-level event frame, \"Name\" property. For second-level event frame, \"BatchID\" attribute [PROCEDURE] PIBatch \"Recipe\" property Event frame \"Recipe\" attribute [UNITPROCEDURE] PIUnitBatch \"Procedure\" property Event frame \"Name\" property [OPERATION] PISubBatch \"Name\" property Event frame \"Name\" property [PHASE] Level 4 PISubBatch \"Name\" property Event frame \"Name\" property [PHASESTATE] Level 5 PISubBatch \"Name\" property Event frame \"Name\" property [PHASESTEP] Level 6 PISubBatch \"Name\" property Event frame \"Name\" property [UNIT] PIUnit \"Name\" property Event frame \"Name\" property [PHASEMODULE] Phase module \"Name\" property Event frame \"Name\" property"
  },
  "content/batch-interface-framework/how-batch-interfaces-work/templates-for-mapping-data-source-events/templates-for-mapping-data-source-events.html": {
    "href": "content/batch-interface-framework/how-batch-interfaces-work/templates-for-mapping-data-source-events/templates-for-mapping-data-source-events.html",
    "title": "Templates for mapping data source events",
    "keywords": "Templates for mapping data source events <!-- Static content. Usually requires no modifications --> Templates enable you to capture data from the data source, specifying the format for the desired data and the events that cause the interface to capture the data. To configure templates, go to the PI Event Frame Interface Manager Templates tab. You can define the following types of templates: Template Type Description Tag Create and update PI tags using data from data source. Property / Attribute Create and update event frame attributes using data from data source. Recipe Override the data source recipe level names. Alarm tag Create and update PI tags using data from an Emerson DeltaV alarms and events data source. Asset attribute Create and update element attributes using data from the data source. DCS Template Identify the value from event frame attributes that contain the batch ID of the batch that we want to link to as a child object. You can configure templates that map the source data to string , integer or float data types and configure the format of the information to be written to the target. The precise format of the events coming from the data source depends on the BES vendor. For detailed information, refer to the vendor-specific topic."
  },
  "content/batch-interface-framework/how-batch-interfaces-work/templates-for-mapping-data-source-events/translate-foreign-language-data.html": {
    "href": "content/batch-interface-framework/how-batch-interfaces-work/templates-for-mapping-data-source-events/translate-foreign-language-data.html",
    "title": "Translate foreign language data",
    "keywords": "Translate foreign language data To process data from non-native language data sources, you can translate strings from the source language to the target language. To configure a translation using PI Event Frame Interface Manager, open the desired template. Select the Translate check box and click Translations . The Translations window opens. Specify the desired source and target text. Translations are not case-sensitive."
  },
  "content/batch-interface-framework/includes/interface-name.html": {
    "href": "content/batch-interface-framework/includes/interface-name.html",
    "title": "",
    "keywords": "PI Interface for Emerson Syncade Batch"
  },
  "content/batch-interface-framework/initialization-file-reference/initialization-file-examples.html": {
    "href": "content/batch-interface-framework/initialization-file-reference/initialization-file-examples.html",
    "title": "Initialization file examples",
    "keywords": "Initialization file examples <!-- Customized for Emerson Syncade --> //******************************************************************* // PI Event Frames interface settings file generated by Functional test. // Interface Version 4.1.9.0 // File changed on: 2020/07/10 15:31:31 //******************************************************************/ [COMMAND LINE PARAMETERS] ID=998 PS=EMDVBCS HOST=localhost AFHOST= localhost AFDATABASE=EMDVBCS [SOURCE TEMPLATE] SOURCE[1].msmqpath=server\\private$\\QueueForOSILocalHost Source[1].websrvpath=https://syncadepi:8081/emrWF/WebService/OrdersInterface.asmx [SIMPLE SWITCHES] DB=0 UBR=true ADU=true MOP=true MUP=true MERGE=true DPRETC=true ras=true Tag[1].Name=WI_Repeating_Param Tag[1].Value=[pval] Tag[1].Trigger=WI_* Tag[1].TYPE=Auto [PROPERTY TEMPLATE] PROPERTY[1].NAME=[PARAMETER] PROPERTY[1].VALUE=[PVAL] PROPERTY[1].TYPE=Auto [RECIPE TEMPLATE] RECIPE[1].NAME=[PROCEDURE] RECIPE[1].CATEGORY=OSIBatch RECIPE[1].TEMPLATE=Procedure RECIPE[1].BATCHID=[BATCHID] RECIPE[1].PRODUCT=[PRODUCT] RECIPE[1].PROPERTY[1].NAME=[Descript] RECIPE[1].PROPERTY[1].VALUE=[Pval] RECIPE[1].PROPERTY[1].ENGUNITS=[EU] RECIPE[1].PROPERTY[1].CATEGORY=Recipe Header RECIPE[1].PROPERTY[1].TRIGGER=[Event, value=\"Recipe Header\"] RECIPE[1].PROPERTY[2].NAME =[Descript] RECIPE[1].PROPERTY[2].VALUE =[Pval] RECIPE[1].PROPERTY[2].CATEGORY = Formula Header RECIPE[1].PROPERTY[2].TRIGGER =[Event, value = \"Formula Header\"] RECIPE[2].NAME =[UNITPROCEDURE] RECIPE[2].CATEGORY = OSIBatch RECIPE[2].TEMPLATE = UnitProcedure RECIPE[2].BATCHID =[BATCHID] RECIPE[2].MODULEPATH =[AREA]\\[PROCESSCELL]\\[UNIT] RECIPE[2].PRODUCT=[PRODUCT] RECIPE[3].NAME=[OPERATION] RECIPE[3].CATEGORY=OSIBatch RECIPE[3].TEMPLATE=Operation RECIPE[4].NAME=[PHASE] RECIPE[4].CATEGORY=OSIBatch RECIPE[4].TEMPLATE=Phase RECIPE[4].MODULEPATH=[AREA]\\[PROCESSCELL]\\[UNIT]\\[PHASEMODULE] RECIPE[4].PROPERTY[1].NAME=[Descript] RECIPE[4].PROPERTY[1].VALUE=[Pval] RECIPE[4].PROPERTY[1].ENGUNITS=[EU] RECIPE[4].PROPERTY[1].CATEGORY=Recipe Value RECIPE[4].PROPERTY[1].TRIGGER=[Event, value=\"Recipe Value\"] RECIPE[4].PROPERTY[2].NAME=[Descript] RECIPE[4].PROPERTY[2].VALUE=[Pval] RECIPE[4].PROPERTY[2].CATEGORY=Report RECIPE[4].PROPERTY[2].TRIGGER=[Event, value=\"Report\"] RECIPE[5].NAME=[PHASESTATE] RECIPE[5].CATEGORY=OSIBatch RECIPE[5].TEMPLATE=PhaseState"
  },
  "content/batch-interface-framework/initialization-file-reference/initialization-file-reference.html": {
    "href": "content/batch-interface-framework/initialization-file-reference/initialization-file-reference.html",
    "title": "Initialization file reference",
    "keywords": "Initialization file reference <!-- Customized for Emerson Syncade --> The initialization (.ini) file stores configuration information for an interface instance. This file is generated and updated by the PI Event Frame Interface Manager configuration tool. To enable you to control access to these files, initialization files are stored under the ProgramData folder. (Prior to release 4.x, initialization files were stored in the interface installation directory.) Note: To ensure a correctly configured .ini file, use the PI Event Frame Interface Manager configuration tool. Do not edit the .ini file manually. The information in this appendix is intended for troubleshooting purposes, to enable you to understand the contents of the .ini file. The .ini file is divided into the following sections: COMMAND LINE PARAMETERS: Basic interface settings. SIMPLE SWITCHES: Connection settings. SOURCE TEMPLATE: Specifies the settings required to connect to the data source, and events to be skipped (filtered) RECIPE TEMPLATE: Defines how data is recorded at each level of the batch hierarchy. TAG TEMPLATE: Defines how tags are created and updated based on incoming data from the data source. PROPERTY TEMPLATE: Define how PI properties or event frame attributes are created based on incoming data from the data source. TRANSLATIONS: Maps text from the data source language to the target language for the PI System. DCS LINK TEMPLATE: Define rules for linking event frames created by different interfaces. In defining settings for templates, you can use the following wildcards to compose expressions: Wildcard Description # single digit numerical value (0-9) @ single alphabetic character (a-z, A-Z) ? any single character ! repeat previous mask symbol * any number of characters Source template settings A single interface instance can gather data from one or more data sources. In the .ini file, each data source is assigned an index, which is used to specify the settings for the data source. To specify a setting for a data source, use the following syntax: Source[<index>].<setting> = <value> Following are some simple examples of data source templates. <!-- Code sample below is custom for Emerson Syncade --> Single Batch Historian: SOURCE[1].msmqpath=localhost\\private$\\QueueForOSIjshearouse Source[1].websrvpath=https://localhost:8081/emrWF/WebService/OrdersInterface.asmx Data source template parameters <!-- Commented out headings don't apply to Emerson Syncade --> The following headings describe the parameters for data source templates. <!-- #### `cursor= client | server` Optional for SQL data source. Available in DeltaV 9.3+. * Client (default): The interface retrieves complete dataset prior to processing. High memory consumption on interface node. * Server: The interface requests and processes one dataset record at a time. Reduces interface node memory consumption. #### `evtdir=<path>` Required for event file data sources, specifies the folder that contains the event files. Example: ```text Source[1].evtdir = D:\\TEST\\RELEASE\\test_1 ``` --> excludestates=<list> (Optional) Specifies a comma-separated list of phase states to ignore. Not case-sensitive. You can use wildcards for matching. Examples: excludestates=COMPLETED,AB*ING,IDLING, COMPLE* MSMQPATH=<PATH to the MSMQ queue> Required for MSMQ data source. Specifies the total path to the MSMQ queue. <!-- #### `isAE=true` Indicates that the data source is a DeltaV Alarms and Events server. #### `opcnode=<node name or IP address>` Required for OPC alarms and events data source. Available in DeltaV 10.3 and higher. Specifies the host of the DeltaV OPCAE server is installed. If used with DeltaV SQL server, must be defined for the same source. Example: ```text Source[1].sqlserver = deltav10 Source[1].sqldatabase = DVHisDB Source[1].opcnode = deltav10 Source[1].opcserver = DeltaV.OPCEventServer.1 ``` #### `opcserver=<server name>` Optional for OPC alarms and events data source. Specifies the name of the alarms and events server, if you are not using the default server. --> skipphases=<list> (Optional) Specifies a comma-separated list of phases to ignore. Not case-sensitive. You can use wildcards for matching. The interface checks the list against the [Phase] field (batch recipe) or [PhaseModule] field (equipment). Examples: skipphases=phase_1, ph*2,ph_test*, ph*ort* skiprecipes=<list> (Optional) Specifies a comma-separated list of recipes to ignore. Not case-sensitive. You can use wildcards for matching. The interface checks the list against the corresponding event field, depending on recipe type, as follows: skiprecipes=recipe_1, rec*2,PRC_PAINT*, UP_TEST:2 skipunits=<list> (Optional) Specifies a comma-separated list of units to ignore. Not case-sensitive. You can use wildcards for matching. The interface checks the list against the corresponding [Unit] field. Example: skipunits = unit_1, u*2 websrvpath=<URL to OrdersInterface web service> Required for Work Flow history recovery. Specifies the URL that points to the Orders Interface web service. The complete web service must me configured. Example: https://localhost:8081/emrWF/WebService/OrdersInterface.asmx <!-- #### `sqlserver=<node name or IP address>` Required for SQL Server data source. Specifies the host where SQL Server is running. Available in DeltaV 9.3+. #### `sqldatabase=<database name>` Optional for SQL Server data source. Specifies the name of the database, if you are not using the default database. (DVHisDB). #### `sqlpswd=<password>` For explicit login to SQL Server, password for user specified in sqluser setting. #### `sqluser=<user name>` User name for explicit login to SQL Server. By default the interface uses Windows authentication to connect to SQL Server. --> Property template settings To define properties (batch database) or attributes (PI AF) to be stored at a particular level of the batch hierarchy, you create property templates. The syntax for property templates is as follows: PROPERTY[<index>].<setting> = <value> Instead of PROPERTY, you can specify ATTRIBUTE. The <index> is a unique identifier used to group the settings for a particular property. To include data from the data source, specify placeholders. For example, if you define the following template: Property[1].Value=[Time]:[Descript]:[Pval]:[EU]-[Event]_Testing ...and the interface applies it to the following incoming data: [Time]=\"12/01/2015 12:01:05\" [Descript]=abc [Pval]=123.456 [EU]=cm [Event]=Report The following property is added to the resulting batch or batch-level event frame: 12/01/2015 12:01:05:abc:123.456:cm-Report_Testing Available property template settings The following headings describes the settings required to define property templates. NAME (Optional) Specifies how the property is to be named. You can use an expression to configure the name, but note that the resulting name must be unique. If two different name templates generate the same name, the property value will be overwritten and no error is logged. If you omit the name setting, the interface assigns a default name (\"Event_n\"). By default, properties are created at the level of the batch hierarchy that triggers their creation. To create a property at the top of the hierarchy, regardless of where it was triggered, specify \"$\" at the beginning of the expression that defines the name. For example: Property[1].Name = $\\[Event] Valid Placeholders [AREA] [BATCHID] [COMMENT] [DESCRIPT] [EU] [EVENT] [OPERATION] [PHASE] [PHASEMODULE] [PHASESTATE] [PHASESTEP] [PROCEDURE] [PROCESSCELL] [PVAL] [TIME] [UNIQUEID] [UNIT] [UNITPROCEDURE] [USERID] [*,value=\"Exact Field\"] [*,value=\"Field Mask\"] advanced parsing VALUE (Required) Specifies the value to be stored in the property. To compose the value, you can use free text plus valid placeholders. Basic example: Property[1].Value = [BatchID] | event: <State*> | [Descript] | val: [Pval] Advanced parsing: Property[1].Value = [BatchID] | event: [*,value=\"State*\"] | [Descript] | val: [Pval] Note: For SQL dta sources with the \"Use original batch event view\" option enabled (/UOBEV), you cannot use the [PVAL] or [EU] placeholders. To obtain this data you must parse it from the [DESCRIPT] placeholder. Valid Placeholders [AREA] [BATCHID] [COMMENT] [DESCRIPT] [EU] [EVENT] [OPERATION] [PHASE] [PHASEMODULE] [PHASESTATE] [PHASESTEP] [PROCEDURE] [PROCESSCELL] [PVAL] [TAG] [TIME] [UNIQUEID] [UNIT] [UNITPROCEDURE] [USERID] [*,value=\"Exact Field\"] [*,value=\"Field Mask\"] advanced parsing TRIGGER Specifies the event that causes the interface to generate the property. To define a trigger, specify an expression composed of a placeholder and value. When the interface detects the specified value in the placeholder, it generates the property. You can specify multiple triggers for a single property. If you specify the triggers on a single line, the property is generated only when all the conditions are met (logical AND). If you specify the trigger expressions on separate lines, the property is generated when any of the conditions is met (logical OR). Examples: Property[1].Trigger = [Parameter, value=\"State Ch*\"] Property[1].Trigger = [Value, value=\"tes*\"] Property[1].Trigger=[Event, value=\"State*] [Pval,value=RUNNING\"] Valid Placeholders [AREA] [BATCHID] [COMMENT] [DESCRIPT] [EU] [EVENT] [OPERATION] [PHASE] [PHASEMODULE] [PHASESTATE] [PHASESTEP] [PROCEDURE] [PROCESSCELL] [PVAL] [UNIQUEID] [UNIT] [UNITPROCEDURE] [USERID] [*,value=\"Exact Field\"] [*,value=\"Field Mask\"] advanced parsing TRANSLATE To specify that the value is to be translated according to the translation map you define set this setting to TRUE. Valid Placeholders TRUE FALSE TYPE Specifies the data type for the value. To configure the interface to evaluate the data and assign the data type accordingly, specify AUTO . Valid Placeholders STRING FLOAT INTEGER AUTO CATEGORY (AF only) Specifies the AF category to be assigned to the attribute. Valid Placeholders [AREA] [BATCHID] [COMMENT] [DESCRIPT] [EU] [EVENT] [OPERATION] [PHASE] [PHASEMODULE] [PHASESTATE] [PHASESTEP] [PROCEDURE] [PROCESSCELL] [PVAL] [TIME] [UNIQUEID] [UNIT] [UNITPROCEDURE] [USERID] [*,value=\"Exact Field\"] [*,value=\"Field Mask\"] advanced parsing UOM or ENGUNITS or EU Specifies the units of measure for the attribute. (See /UOBEV note for VALUE setting, above.) Valid Placeholders [AREA] [BATCHID] [COMMENT] [DESCRIPT] [EU] [EVENT] [OPERATION] [PHASE] [PHASEMODULE] [PHASESTATE] [PHASESTEP] [PROCEDURE] [PROCESSCELL] [PVAL] [TIME] [UNIQUEID] [UNIT] [UNITPROCEDURE] [USERID] [*,value=\"Exact Field\"] [*,value=\"Field Mask\"] advanced parsing Tag templates Tag template specify how the interface creates and updates PI tags based on incoming data. For example, the following template creates one tag per unit for state change events: Tag[1].Name=BESName:[UNIT].Event.[EVENT] Tag[1].Descriptor=[UNIT] [EVENT] Tag[1].EngUnits=[EU] Tag[1].Value=[DESCRIPT]|[EVENT]|[PVAL]|[EU]|[AREA]|[PROCESSCELL]|[UNIT]|[PHASEMODULE]|[USERID] Tag[1].Type=string Tag[1].UnitAlias=Event.[EVENT] Tag[1].Trigger=[EVENT,value=\"State Change\"] Tag template settings The following table lists valid settings for tag templates. The timestamp for tag events is taken from the triggering event. ANNOTATION Annotate the tag using a string. Valid Placeholders [AREA] [BATCHID] [COMMENT] [DESCRIPT] [EU] [EVENT] [OPERATION] [PHASE] [PHASEMODULE] [PROCEDURE] [PROCESSCELL] [PVAL] [UNIQUEID] [UNIT] [UNITPROCEDURE] [USERID] [*,value=\"Exact Field\"] [*,value=\"Field Mask\"] advanced parsing ANNOTATION2 Annotate the tag using a name/value object. Valid Placeholders [AREA] [BATCHID] [COMMENT] [DESCRIPT] [EU] [EVENT] [OPERATION] [PHASE] [PHASEMODULE] [PROCEDURE] [PROCESSCELL] [PVAL] [UNIQUEID] [UNIT] [UNITPROCEDURE] [USERID] [*,value=\"Exact Field\"] [*,value=\"Field Mask\"] advanced parsing DESCRIPTOR Specifies how the descriptor field of the tag is populated. Valid Placeholders [AREA] [BATCHID] [COMMENT] [DESCRIPT] [EU] [EVENT] [OPERATION] [PHASE] [PHASEMODULE] [PROCEDURE] [PROCESSCELL] [PVAL] [UNIQUEID] [UNIT] [UNITPROCEDURE] [USERID] [*,value=\"Exact Field\"] [*,value=\"Field Mask\"] advanced parsing EU Specifies the engineering units for the tag. Valid Placeholders [AREA] [BATCHID] [COMMENT] [DESCRIPT] [EU] [EVENT] [OPERATION] [PHASE] [PHASEMODULE] [PROCEDURE] [PROCESSCELL] [PVAL] [UNIQUEID] [UNIT] [UNITPROCEDURE] [USERID] [*,value=\"Exact Field\"] [*,value=\"Field Mask\"] advanced parsing NAME Specifies how the tag is to be named. Valid Placeholders [AREA] [BATCHID] [COMMENT] [DESCRIPT] [EU] [EVENT] [OPERATION] [PHASE] [PHASEMODULE] [PROCEDURE] [PROCESSCELL] [PVAL] [UNIQUEID] [UNIT] [UNITPROCEDURE] [USERID] [*,value=\"Exact Field\"] [*,value=\"Field Mask\"] advanced parsing PHASEALIAS Configures the naming convention for the phase module alias generated by the interface. The unit alias refers to the MDB module or AF asset representing the phase module associated with the incoming event. Valid Placeholders [AREA] [BATCHID] [COMMENT] [DESCRIPT] [EU] [EVENT] [OPERATION] [PHASE] [PHASEMODULE] [PROCEDURE] [PROCESSCELL] [PVAL] [UNIQUEID] [UNIT] [UNITPROCEDURE] [USERID] [*,value=\"Exact Field\"] [*,value=\"Field Mask\"] advanced parsing TRIGGER Specifies the event that causes the interface to generate or update the tag. To define a trigger, specify an expression composed of a placeholder and value. When the interface detects the specified value in the placeholder, it generates or updates the tag. You can specify multiple triggers for a single tag. If you specify the triggers on a single line, the tag is generated only when all the conditions are met (logical AND). If you specify the trigger expressions on separate lines, the tag is generated when any of the conditions is met (logical OR). Valid Placeholders [AREA] [BATCHID] [COMMENT] [DESCRIPT] [EU] [EVENT] [OPERATION] [PHASE] [PHASEMODULE] [PROCEDURE] [PROCESSCELL] [PVAL] [UNIQUEID] [UNIT] [UNITPROCEDURE] [USERID] [*,value=\"Exact Field\"] [*,value=\"Field Mask\"] advanced parsing TRANSLATE To specify that tag settings are to be translated according to the translation map you define, set this setting to TRUE. Valid Placeholders TRUE FALSE TYPE Specifies the data type for the tag. To configure the interface to evaluate the data and assign the data type accordingly, specify AUTO. Valid Placeholders STRING FLOAT INTEGER AUTO UNITALIAS Configures the naming convention for the unit alias generated by the interface. The unit alias refers to the MDB module or AF asset representing the unit associated with the incoming event. Valid Placeholders [AREA] [BATCHID] [COMMENT] [DESCRIPT] [EU] [EVENT] [OPERATION] [PHASE] [PHASEMODULE] [PROCEDURE] [PROCESSCELL] [PVAL] [UNIQUEID] [UNIT] [UNITPROCEDURE] [USERID] [*,value=\"Exact Field\"] [*,value=\"Field Mask\"] advanced parsing VALUE (Required) Specifies the value to be stored in the tag. To compose the value, you can use free text plus valid placeholders. Valid Placeholders [AREA] [BATCHID] [COMMENT] [DESCRIPT] [EU] [EVENT] [OPERATION] [PHASE] [PHASEMODULE] [PROCEDURE] [PROCESSCELL] [PVAL] [TAG] [TIME] [UNIQUEID] [UNIT] [UNITPROCEDURE] [USERID] [*,value=\"Exact Field\"] [*,value=\"Field Mask\"] advanced parsing Recipe Templates To define the data generated for each level of the batch hierarchy, you define recipe templates. Following is a typical set of default recipe templates, though the precise set of default templates that a batch interface provides for a BES is vendor-specific. RECIPE[1].NAME=[PROCEDURE] RECIPE[1].CATEGORY=OSIBatch RECIPE[1].TEMPLATE=Procedure RECIPE[1].BATCHID=[BATCHID] RECIPE[1].PRODUCT=[PVAL] RECIPE[1].PRODUCTTRIGGER=[EVENT, value=\"Recipe Header\"][DESCRIPT, value=\"Product Code\"] RECIPE[1].PROPERTY[1].NAME=[Descript] RECIPE[1].PROPERTY[1].VALUE=[Pval] RECIPE[1].PROPERTY[1].ENGUNITS=[EU] RECIPE[1].PROPERTY[1].CATEGORY=Recipe Header RECIPE[1].PROPERTY[1].TRIGGER=[Event, value=\"Recipe Header\"] RECIPE[1].PROPERTY[2].NAME=[Descript] RECIPE[1].PROPERTY[2].VALUE=[Pval] RECIPE[1].PROPERTY[2].CATEGORY=Formula Header RECIPE[1].PROPERTY[2].TRIGGER=[Event, value=\"Formula Header\"] RECIPE[2].NAME=[UNITPROCEDURE] RECIPE[2].CATEGORY=OSIBatch RECIPE[2].TEMPLATE=UnitProcedure RECIPE[2].BATCHID=[BATCHID] RECIPE[2].MODULEPATH=[AREA]\\[PROCESSCELL]\\[UNIT] RECIPE[2].PRODUCT=[PVAL] RECIPE[2].PRODUCTTRIGGER=[EVENT, value=\"Recipe Header\"][DESCRIPT, value=\"Product Code\"] RECIPE[3].NAME=[OPERATION] RECIPE[3].CATEGORY=OSIBatch RECIPE[3].TEMPLATE=Operation RECIPE[4].NAME=[PHASE] RECIPE[4].CATEGORY=OSIBatch RECIPE[4].TEMPLATE=Phase RECIPE[4].MODULEPATH=[AREA]\\[PROCESSCELL]\\[UNIT]\\[PHASEMODULE] RECIPE[5].NAME=[PHASESTATE] RECIPE[5].CATEGORY=OSIBatch RECIPE[5].TEMPLATE=PhaseState RECIPE[6].NAME=[PHASESTEP] RECIPE[6].CATEGORY=OSIBatch RECIPE[6].TEMPLATE=PhaseStep Translation Templates Following is a simple template that translates German source data to English for storage in the PI System. TRANSLATE: \"Grundrezept\" = \"Procedure\" TRANSLATE: \"Teilrezept\" = \"Unit Procedure\" TRANSLATE: \"Grundoperation\" = \"Operation\" TRANSLATE: \"Grundfunktion\" = \"Phase\""
  },
  "content/batch-interface-framework/installation-prerequisites/installation-prerequisites.html": {
    "href": "content/batch-interface-framework/installation-prerequisites/installation-prerequisites.html",
    "title": "Installation prerequisites",
    "keywords": "Installation prerequisites <!-- Static topic. No modifications usually required --> Minimum required versions of PI Server software: PI Server 3.3 and PI AF 2010 R3 (2.4). Before installing and configuring, ensure that the following prerequisites are met: Verify that the PI Data Archive is running and is accessible from the computer where you intend to run the interface (the interface node). If you intended to generate event frames, make sure that the PI AF Server is running and is accessible from the interface node. Ensure that the system time on all these computers is correct. Verify that your batch execution system (BES) is up and running and that the data source is accessible from the interface node. To install the interface, download and run its setup kit. By default, the interface is installed in an interface-specific folder in the following location: %PIHOME%\\Interfaces\\ The interface installation directory contains all the files and folders required to configure and run the interface, and includes example configurations. The interface can run on the same computer as the BES or on a dedicated node. To avoid affecting the performance of the PI Data Archive, do not install the interface on the same computer as the PI Data Archive. When installing the interface, reserve the C: drive for the operating system, and install the interface on another drive. If the data source is Microsoft SQL Server, you must install the Microsoft SQL Native Client on the interface node. You can download the client from the MSDN web site. If the data source is an Oracle database, you must install the corresponding version of Oracle Provider for OLE DB. To configure the interface, use the PI Event Frame Manager configuration tool. Note: To avoid potential interface configuration and startup issues, if you intend to run the interface as a Windows service and need to configure explicit login settings for your BES data sources, ensure that the account you configure for the service is the same account you use to run the configuration tool."
  },
  "content/batch-interface-framework/installation-prerequisites/installation-prerequisites/configure-interface-instances-for-failover.html": {
    "href": "content/batch-interface-framework/installation-prerequisites/installation-prerequisites/configure-interface-instances-for-failover.html",
    "title": "Configure interface instances for failover",
    "keywords": "Configure interface instances for failover To ensure that batch data continues to be collected if an instance of the interface fails, you can configure multiple interface instances to run in failover mode. The instances must be configured identically. To enable failover, perform the following steps before you start the interface instances: Configure instances of the interface on different host computers. Assign the same interface ID and point source, and assign unique failover IDs to each instance. You can configure more than two instances for failover. In the target PI Data Archive, create a string tag and configure it with the same point source and Location1 (interface ID) as the interfaces. The interface instance uses this string tag to coordinate failover. Using PI Event Frame Interface Manager, go to the Operational Settings tab and configure the failover settings. Failover tag The name of the tag that you created in the previous step. Failover identifier A unique ID for the interface instance. Failover swap time The amount of time that the current primary interface must be unavailable before failover occurs. Start the interface instances. When the primary interface instance is operational, it updates the failover tag with the timestamp of the last value written. The backup instance monitors this tag and, if the failover swap time elapses and the failover tag has not been updated, the backup instance takes over data collection and becomes the primary instance."
  },
  "content/batch-interface-framework/installation-prerequisites/installation-prerequisites/create-and-configure-the-interface-instance.html": {
    "href": "content/batch-interface-framework/installation-prerequisites/installation-prerequisites/create-and-configure-the-interface-instance.html",
    "title": "Create and configure the interface instance",
    "keywords": "Create and configure the interface instance <!-- Static topic. No modifications usually required --> For each instance you create, settings are stored in a separate Windows command (.bat) file and an initialization (.ini) file in the interface installation folder. The batch file launches the interface, specifying settings as command line parameters. The initialization file also contains settings, and it defines templates that determine how data from the data source is stored in the PI System. To configure settings for interfaces, use the PI Event Frames Interface Manager. Use this tool even if you are configuring the interface to store data in the PI Batch Database rather than event frames. A single batch interface instance can be configured to read from multiple data sources. This capability enables you to handle distributed batch processing scenarios, where multiple batch execution systems cooperate in the manufacturing of a single batch. If you configure multiple data sources, all data sources must be the same type, either event files or SQL databases. Note: Each instance of an event frame generating interface, like PI EFGen, must run under a unique service account. For additional information, sign into the OSIsoft customer portal to read this Knowledge Base article on PI EFGen service accounts. To launch the PI Event Frames Interface Manager, click Start > All Programs > PI System > PI Event Frames Interface Manager . For detailed information about the settings on each tab, see PI Event Frames Interface Manager . To create an instance of the interface, perform the following steps using PI Event Frames Interface Manager: On the Interface Selection tab, click Add Interface . A list of installed interfaces displays. Choose the interface that you want to configure, and specify a service ID number and description if desired. Click OK . On the Server Information tab, specify settings for your PI servers. If you intend to create event frames, check Create event frames and specify the PI Asset server and AF database. On the Source tab, configure the settings for the data source (the BES). Note that you can configure multiple data sources for the same interface instance. On the Templates tab, define templates for tags, properties and the batch recipe. For details, see Templates for mapping data source events . On the Filters tab, specify any batch levels from the data source that you do not want the interface to process. On the Time Settings tab, configure retry and timeout settings. On the Batch Setup tab, configure settings according to the requirements of your batch execution system. On the Operational Settings tab, configure settings to determine how batch data is recorded, and any interface-specific settings required. To save your changes, click Save Settings ."
  },
  "content/batch-interface-framework/installation-prerequisites/installation-prerequisites/logging-and-error-messages.html": {
    "href": "content/batch-interface-framework/installation-prerequisites/installation-prerequisites/logging-and-error-messages.html",
    "title": "Logging and error messages",
    "keywords": "Logging and error messages <!-- Static topic. No modifications usually required --> The interface logs operational messages during interface startup, data collection and recovery. Additional messages are logged if you enable debugging. To view messages, open PI System Management Tools, go to Operation > Message Logs and click the PI Message Log tab. Note: From the command line, use the pigetmsg utility. For detailed information about interface logging, refer to OSIsoft Knowledge Base article KB00401 . For details about managing the error logging process, see the PI API Installation Instructions manual. To enable debug output for troubleshooting, launch PI Event Frames Interface Manager, select your interface instance, and go to the Operational Settings tab."
  },
  "content/batch-interface-framework/installation-prerequisites/installation-prerequisites/pi-server-connectivity.html": {
    "href": "content/batch-interface-framework/installation-prerequisites/installation-prerequisites/pi-server-connectivity.html",
    "title": "PI server connectivity",
    "keywords": "PI server connectivity <!-- Static topic. No modifications usually required --> If a connection is lost during processing, the interface suspends all actions until it reconnects to the PI Data server or the data source. If the data source connection is down, the interface tries to reconnect on every scan until it succeeds. If the PI Data server connection is lost, the interface attempts to reconnect periodically until it times out. You can configure both the retry interval and the timeout period on the Time Settings tab of the PI Event Frames Interface Manager. The interface logs any connection errors that occur."
  },
  "content/batch-interface-framework/installation-prerequisites/installation-prerequisites/security-overview.html": {
    "href": "content/batch-interface-framework/installation-prerequisites/installation-prerequisites/security-overview.html",
    "title": "Security overview",
    "keywords": "Security overview <!-- Static topic. No modifications usually required --> If you are running PI Data Archive 3.4.380.36 or later, you can take advantage of its support for Windows Integrated Security by running the interface service using a Windows account that has the required permissions on the PI Data server. To configure Windows Integrated Security, use PI SMT to define a mapping that assigns a PI identity that has the required permissions to the user or user's group. Caution: To avoid issues with the encryption of credentials be sure to use the same account for the interface service as you use in the PI Event Frames Interface Manager utility. If the interface service logon is not the same as the account that was used to save the credentials in the PI Event Frames Interface Manager utility, decryption of the credentials will fail and the service will exit. This affects credentials stored for login to the data source (e.g. SQL Login) and/or explicit login to AF. For pre-3.4.380.36 versions of the PI Data Archive, you must create a PI trust for the user that runs the interface and configuration tool. Limit the trust to the hostname or IP address of the interface node and the application name (BIFConfig.exe for the PI Event Frames Interface Manager). Set the following permissions for the user that runs the interface: PI Data Archive permissions ( PI SMT : Browse to Security > Database Security ) PIBATCH: read/write PIMODULES: read/write PIPOINT read/write PIAFLINK: read (required for batch-to-event frames migration) Per-point security ( PI SMT : Browse to Points > Point Builder ) Points created by the interface (using tag templates): Set both PtSecurity and DataSecurity to read/write If using EFGEN: DataSecurity read access to the active points PI Asset Framework permissions Database: read/write Categories: read/write Element: read/write Element templates: read/write/read data/write data Event frames: read data/write data To configure batch interfaces to run as a service, the user who runs the PI Event Frames Interface Manager must be in the local Administrators group (administrative privilege is required to create services). The following permissions are required to run the PI Event Frame Manager to configure batch interfaces: PI Data Archive permissions PIMODULES: read PIPOINT: read PIARCDATA: read (required for batch-to-event frames migration) PI Asset Framework permissions Database: read Categories: read Elements: read Element templates: read/write"
  },
  "content/batch-interface-framework/installation-prerequisites/installation-prerequisites/security-overview/assign-permissions.html": {
    "href": "content/batch-interface-framework/installation-prerequisites/installation-prerequisites/security-overview/assign-permissions.html",
    "title": "Assign permissions for user accounts and PI points",
    "keywords": "Assign permissions for user accounts and PI points <!-- Static topic. No modifications usually required --> The user that runs the interface requires read/write access to the PI Data Archive. To create event frames and write data to elements and attributes, the user must have permission to connect to the PI Asset Framework. To configure the interface, the user must be in the local Administrators group. Assign the required permissions to the user that runs the interface and all users who need to run the PI Event Frames Interface Manager configuration tool. Launch PI System Management Tools, and click Security > Database Security . For the user account under which the batch interfaces run, set the PIPOINT table to read and write permission. For the user account under which the batch interfaces run,set the PIBACKUP table to read permission. For PI points maintained by batch interfaces, set security as follows: Set the PtSecurity to read and write permission for any point that the interface creates. Set the DataSecurity to read and write permission for any point to which the interface writes data. You can set PI point permissions using PI SMT by choosing Points > Point Builder . You can change point settings in bulk using the PI SMT plug-in for Microsoft Excel."
  },
  "content/batch-interface-framework/installation-prerequisites/installation-prerequisites/security-overview/configure-security-for-pi-af.html": {
    "href": "content/batch-interface-framework/installation-prerequisites/installation-prerequisites/security-overview/configure-security-for-pi-af.html",
    "title": "Configure security for the PI Asset Framework",
    "keywords": "Configure security for the PI Asset Framework <!-- Static topic. No modifications usually required --> To configure batch interface security settings for the PI Asset Framework, perform the following steps. Launch PI System Explorer. Click Database on the toolbar. The Select Database window opens, listing existing databases. Right-click the database where you intend to store the batch event frames, and then click Security . Browse to the category and enter the required settings: Set Database to read/write. Set Categories to read. Set Element to read/write. Set Element templates to read. Set Event frames to read/write."
  },
  "content/batch-interface-framework/installation-prerequisites/installation-prerequisites/security-overview/configure-security-for-pi-data-archive.html": {
    "href": "content/batch-interface-framework/installation-prerequisites/installation-prerequisites/security-overview/configure-security-for-pi-data-archive.html",
    "title": "Configure security for PI Data Archive",
    "keywords": "Configure security for PI Data Archive <!-- Static topic. No modifications usually required --> If you are running PI Data Archive 3.4.380.36 or later, you can take advantage of its support for Windows Integrated Security by running the interface service using a Windows account that has the required permissions. To use Windows Integrated Security, use PI System Management Tools to define a mapping that assigns the Windows user (or group) a PI identity that has the required permissions. For pre-3.4.380.36 versions of the PI Data Archive, you must create a PI trust for the user who runs the interface and configuration tool. For tightest security, limit the trust to the hostname or IP address of the interface node and the application name. If you are installing the interface on a node other than the PI Data server, you must create trusts to ensure that the configuration tool and the interface have access to the server. To create a trust, launch PI System Management Tools and connect to the target server. Click Security , and then click Mappings & Trusts . Right-click within the Trusts tab, and click New Trust . The Add Trust wizard launches. Enter a meaningful name and description for the trust. Configure the following settings: Program Type of Trust Application Name PI Event Frame Interface Manager PI-API application BIFConfig.exe Interface executable PI-SDK application Executable name"
  },
  "content/batch-interface-framework/installation-prerequisites/interface-configuration.html": {
    "href": "content/batch-interface-framework/installation-prerequisites/interface-configuration.html",
    "title": "Batch interface configuration",
    "keywords": "Batch interface configuration <!-- Mark Bishop 6/18/21: Customized for Emerson Syncade --> The following diagrams illustrate various options for configuring batch interfaces, depending on the data source and the desired PI System output. The first illustrates configuration for the Data Source MSMQ. Data source: MSMG Target—PI AF (event frames and assets) This diagram illustrates configuration for recovery. Data source: Workflow restful web service Target—PI AF (event frames and assets)"
  },
  "content/batch-interface-framework/introduction/introduction.html": {
    "href": "content/batch-interface-framework/introduction/introduction.html",
    "title": "Introduction to PI Interface for Emerson Syncade Batch",
    "keywords": "Introduction to PI Interface for Emerson Syncade Batch <!-- Mark Bishop 6/18: Modified for Emerson Syncade --> The Syncade Manufacturing Execution System (MES) produces work procedures using production events and batch records, executing recipes and workflows and integrating equipment maintenance operations with process controls to optimize manufacturing environments. PI Interface for Emerson Syncade Batch is a scan-based interface that uses tag and property templates to capture data from Syncade batches. That includes manual phase steps, historical data from Syncade web services, and real-time data from the Microsoft Message Queue. The interface populates PI Batch Database and PI Module Database based on the events and data read from a data source. The interface can be configured to create and update PI points based on the data received. It cannot update the batch data source. Note: If you record batch process data directly to PI tags and do not use a BES, you can generate batch data from PI tag data using the PiBaGen or PI EFGen utilities. For details, refer to the manuals for these applications. To use event frames, your PI batch interface must be version 3.x or higher. The interface can read data from multiple data sources, which enables PI Server to handle scenarios in which different overlapping batch recipes can access the same unit in different stages of the production cycle. By acquiring data for the same time frame from multiple sources and collating it into a single time-ordered sequence, a single interface instance can capture the complete history of the batch process. Batch data is persistent in the data source and not in danger of being lost, as the interface does not use PI buffering. If connection to the PI server is lost, the interface continues to collect data from the data source, transmitting it to PI Server when the connection is reestablished. If the interface is unable to collect data, the data remains available in the database or event files, so you can use recovery mode to fill in data missed during the time the interface was down. PI Interface for Emerson Syncade Batch is designed for recipes that constrain a unit to run only one unit procedure at a time. <!-- Framework content --> Two different models are used to describe batch processes: The equipment model describes the physical equipment necessary to create a batch. The recipe model describes the procedures that are performed during the execution of a recipe. There is no intrinsic or direct relationship between the models. With the exception of arbitration events, journal files contain only recipe model event information. The interface is compliant with the ISA S88.01 standard and uses the S88 process model, which is composed of the following hierarchy: Procedure (recipe) Unit procedures Operations Phases Phase steps Phase states Note: According to the ISA S88.01 standard, procedures and unit procedures are optional. A recipe can be composed solely of operations and phases. The PI Batch Database does not use a strict S88 approach to describe or record batch data. The physical model is composed of the following equipment-oriented hierarchy: Enterprise Site Area Process cell Unit Equipment module Control module Unit procedures from the data source are mapped to PIUnitBatches. Only a single unit procedure can be active in a unit at any given time, which restricts the configuration of recipes that can be run by the batch execution system if batch data is to be captured by the interface in a reliable and meaningful way. By contrast, event frames support parallel unit procedures natively. You can configure the interface to create PI points and properties by defining templates, which specify the events that trigger creation, configure how the property or tag is named, and define the data to be stored."
  },
  "content/batch-interface-framework/introduction/reference-manuals.html": {
    "href": "content/batch-interface-framework/introduction/reference-manuals.html",
    "title": "Reference manuals",
    "keywords": "Reference manuals <!-- Mark Bishop 6/18/21: Customized for Emerson Syncade --> See the following user guides for additional information on the operation of PI Interface for Emerson Syncade Batch: PI Data Archive Reference Guide PI System Management Tools Guide PI SDK Documentation AF SDK Documentation For details about the format and contents of source data, refer to the documentation provided by your batch execution system vendor."
  },
  "content/batch-interface-framework/introduction/supported-features.html": {
    "href": "content/batch-interface-framework/introduction/supported-features.html",
    "title": "Supported features",
    "keywords": "Supported features <!-- Mark Bishop 6/18: Customized for Emerson Syncade --> PI Interface for Emerson Syncade Batch runs in 32-bit or 64-bit in emulation mode. No native 64-bit builds of the interfaces are available. The following table provides a summary of the features supported by this interface. <!-- framework content --> Feature Support Part Number PI-IN-EM-DVBCS-NTI Auto-creates PI Points and equipment assets? Yes Point Builder Utility No Stores batch data in PI Batch Database and PI Module Database No Stores batch data in PI AF Yes Supports equipment arbitration events No ICU Control No (use PI Event Frame Interface Manager configuration tool) PI Point Data Types* Int32/ Float32/ String Sub-second Timestamps Yes Sub-second Scan Classes No Automatically Incorporates Changes to PI Point Attributes No Exception Reporting No Outputs from PI No Inputs to PI Event and Scan-based Supports Questionable Bit No Supports Multi-character Pointsource Yes Maximum Point Count No maximum Uses PI SDK Yes: version 1.3.4.333 or higher required Uses AF SDK Yes: version 2.5.x or higher required PINet String Support N/A Source of Timestamps* BES (not system time on interface node) History Recovery Yes UniInt-based No Disconnected Startup* No SetDeviceStatus* Yes Failover Yes Vendor Software Required on PI Interface Node No Vendor Hardware Required No Additional PI Software Included with Interface Yes Device Point Types The interface receives data from source as strings and coerces the data into numerical types according to tag templates, if defined. Serial-Based Interface No Equipment arbitration events Some PI Batch Interfaces run against BES or MES that support equipment arbitration events. Those events provide precise time stamps for the start and end times of unit batches. Individual installations of BES/MES that support equipment arbitration events may not be configured to provide such events. In the event the BES/MES supports equipment arbitration events, but is configured to not provide them you should use the command line parameter: /noarbitration. Using /noarbitration will ensure that the interface: Sets the start time of unit batches using the timestamp of the \"Unit Procedure Started\" event or the start of the next operation or phase for the unit, whichever is later. Sets the end time of unit batches using the timestamp of the \"Unit Procedure Finished\" event or the end of the last operation or phase for the unit, whichever is earlier. For operation-level recipes, the interface uses the start time of the first phase as the start time for the parent operation and unit batch, and the timestamp of the \"Operation Finished\" message as the end time of the phase, operation and unit batch. History recovery You can stop the interface without losing any data, because the data is persistent in the data source. Data recovery is limited by the history available from the BES, the number of licensed PI tags, and the size and time frame of the PI archives into which data is recovered. Device status tag This string tag contains information about communication between the interface and the data source. This tag is evaluated only while the heartbeat tag is updating and is updated on startup, change, and shutdown. During normal operation, the tag contains the digital state set value \"Good,\" indicating that the interface is communicating properly with the data source. Otherwise, the tag contains a string indicating status. The following table lists standard status strings. Message Description 1 Starting The interface is starting. 2 Connected / No Data The interface is connected to the data source but is not capable or reading or writing data to the foreign device. 3 n device(s) in error The interface is not able to communicate with the specified number of devices. Usually includes additional interface-specific details. 4 Intf Shutdown The interface is shutting down. 5 interface_specific_message Message specific to the interface."
  },
  "content/batch-interface-framework/pi-event-frames-interface-manager/batch-settings.html": {
    "href": "content/batch-interface-framework/pi-event-frames-interface-manager/batch-settings.html",
    "title": "Batch Setup tab",
    "keywords": "Batch Setup tab <!-- Mark Bishop 6/18/21: Customized for Emerson Syncade --> The settings on this tab configure batch generation as described in the following table. For detailed information, refer to the PI Batch Interfaces Users Guide . Batch settings (Command line parameter settings) Report as step (/RAS) Use the \"Report\" event to create phase steps under active phase states. Alternate PI module path (/SMP) Specifies an alternate PI Module path or PI AF element path for a particular equipment hierarchy. Disable arbitration (/NOARBITRATION) Create unit batches based solely on source batch recipe data. For use when the source Batch Executive System (BES) provides batch data without equipment arbitration data. Disable arbitration counters (/DAC) Directs the interface to release a unit on the first resource release event even if the number of acquire events is higher than number of release events. <!-- Setting below heavily edited--> Use batch recipe (/UBR) Default setting: /UBR = false /UBR can be set in the .ini file, from the command line, or by using the PI Event Frames Interface Manager / batch Setup tab. If /UBR = true the interface will use SYSTEM MESSAGE to control the start and end of event frames. Example System Messages are BEGIN OF BATCH , END OF BATCH , UNIT PROCEDURE STARTED , and UNIT PROCEDURE ENDED . If /UBR = false the interface will use STATE CHANGE to control the start and end of event frames. Example State Change messages are RUNNING , REMOVED , ABORTED , COMPLETE , STOPPED , and ABANDON . The interface will combine the state change with the recipe ( Batch , UnitProcedure , Operation , Phase ) to determine which recipe step has changed state. Use original batch event view (/UOBEV) Directs the interface to use the original batch event view. By default, the interface queries multiple tables to retrieve data for batch-associated events. True batch start end (/TBSE) Use top level recipe start/end events for creating batch objects. Allow deferred units (/ADU) Enable the creation of unit batches for recipes in units that are allocated at the phase level rather than the unit batch level. <!-- MB 6/18/21: Does not apply to Syncade ### Disable auto module creation for A&E data source (/DAMCAE) Ignore events from a DeltaV Event Chronicle (alarms & events) data source when creating or checking PI Module Database objects. --> Remove trailing index from recipe fields (/RTI) Remove trailing index from Recipe fields. Applicable to Procedure, Unit Procedure and Operation Recipe fields. Emerson EVT data source only. Merge settings (Command line parameter settings) Merge operation (/MOP) Merge identically-named operations under the same parent unit procedure. Merge unit procedures (/MUP) Merge identically-named sequential unit procedures running on the same unit into a single unit procedure. Merge multiple source batches with same batch ID into one batch (/MERGE) Enable merging of multiple source batches with same ID. The original data for each batch merged is stored in PI properties under a node named using the ID of the original batch. Batch ID mask (/BIDM) Override the incoming batch ID. Truncate batch ID (/TBID) Use the truncated batch ID in the batch ID field of unit procedures. Batch ID attribute ( / DCSBATCHIDATTRIBUTE ) Specifies the Syncade attribute that contains the batch ID used to link to BES event frames. The default value is AutomationBatchID. Link to child eventframes( /WRITELINK ) Combine event frames from different interface instances. For an MES controlling one or more BES systems, configure Link to child event frames on the MES interface and configure an interface instance for each BES, specifying the same linkage element in the BES Link from parent event frames setting. The BES interface instances will then create event frame references under the MES event frames that refer to the BES event frames. For Emerson Syncade systems, the AutomationBatchID field must match the batchID of the batch created by the BES. For a BES interface controlling one or more MES systems, configure Link from parent event frames on the MES interface and configure an interface instance for each BES, specifying the same linkage element in the BES Link to child event frames setting. The MES interface will then create event frame references under the BES event frames that refer to the MES event frames. Link templates must also be configured to define which events specify a link. Link from parent event frames ( /READLINK ) Combine event frames from different interface instances. For an MES controlling one or more BES systems, configure Link from parent event frames on each BES instance, specifying the same linkage element in the MES Link to child event frames setting. The BES interface instances will then create event frame references under the MES event frames that refer to the BES event frames. For Emerson Syncade systems, the AutomationBatchID field must match the batchID of the batch created by the BES. For a BES controlling one or more MES systems, configure Link from parent event frames on each MES instance, specifying the same linkage element in the BES Link to child event frames setting. The MES interface instances will then create event frame references under the BES event frames that refer to the MES event frames. Link templates must also be configured to define which events specify a link."
  },
  "content/batch-interface-framework/pi-event-frames-interface-manager/batch-setup-tab.html": {
    "href": "content/batch-interface-framework/pi-event-frames-interface-manager/batch-setup-tab.html",
    "title": "Batch Setup tab",
    "keywords": "Batch Setup tab <!-- Topic requires customization for specific interface --> Use the settings on this tab to identify the elements for various batch settings. Report as step Select this option and then set a Start and an End date. Alternate PI module path Select this option to specify an alternate PI Module path or PI AF element path for a particular equipment hierarchy. Click Find module to open the Browse to PI Module Path window to navigate to the desired PI module. Select the PI Module to display the path in the Module path field, then click OK. Disable arbitration Select this option to create unit batches based solely on source batch recipe data. Select this option when the source Batch Executive System (BES) provides batch data without equipment arbitration data. Disable arbitration counters Select this option to direct the interface to release a unit on the first resource release event even if the number of acquire events is higher than the number of release events. True batch start date Select this option to use top level recipe start/end events for creating batch objects. Allow deferred units Select this option to enable the creation of unit batches for recipes in units that are allocated at the phase level rather than the unit batch level."
  },
  "content/batch-interface-framework/pi-event-frames-interface-manager/configure-tag-templates.html": {
    "href": "content/batch-interface-framework/pi-event-frames-interface-manager/configure-tag-templates.html",
    "title": "Configure Tag templates",
    "keywords": "Configure Tag templates To create or update PI tags when specified events are read, configure tag templates. To create or update PI tags based on alarms read from an Emerson DeltaV Event Chronicle (alarms & events) data source, configure alarm tag templates. To define tag templates using PI Event Frame Interface Manager, go to the Templates page and click the Tag tab. To configure the name of the tag to be created or updated, specify the Name field. To assign tag names based on incoming data, use placeholders. For example, to track phase module report events on a per-unit basis, you might configure the name as follows: [Unit] [phasemodule] Report With the preceding template, when the interface reads a report event for the NORTON phase module on unit XUNIT_52003, it replaces the placeholders with data from the specified fields and creates or updates a PI tag with the following name: XUNIT_52003 NORTON Report If the name structure contains placeholders, the tag template is triggered only if all the corresponding fields from the incoming event contain data (that is, are not blank). Different templates can update the same PI tag, if the templates' name structure resolves to the same tag. This capability enables you to write different values to the tag depending on the nature of the triggering event. For example, a value of 1 can be written to the tag when a unit procedure starts and a value of 0 can be written to the same tag when the unit procedure ends. To specify the data to be written to the tag, configure the Value field. To include data read from the data source in the tag value, use placeholders. For example, to simply record the incoming value without transforming it, specify the [PVAL] placeholder. A more complex example: to configure a value that concatenates phase module, event, description, incoming value and engineering units, specify the following: [PHASEMODULE].[EVENT].[DESCRIPT]: [PVAL] [EU] The preceding expression generates data like the following: CHARGE_DIW.Recipe Value.CPP_HIGH_LIMIT: 2535 kg Unlike placeholders in tag names, value placeholders can be replaced with empty fields from the incoming event, unless you use advanced field parsing to configure the value. To update a tag when a particular event is read from the data source, specify the EVENT keyword in the Name field, as follows: [EVENT, VALUE=\"event_text\"] This approach enables you to write different values to the tag depending on the text in the EVENT column. If you require a more refined approach, specify the incoming data that causes the template to be evaluated by configuring one or more triggers on the Trigger tab of the tag template. To configure the template to handle multiple different events, specify separate triggers (\"OR\" logic). To ensure that the template is triggered only when a set of multiple conditions are all detected (\"AND\" logic), specify a single trigger containing all the conditions. For example, to trigger the template only for system message events that are phase logic failures, specify the trigger as follows: [EVENT, value=\"System Message\"] [DESCRIPT, value=\"Phase Logic Failure\"] To ignore specified incoming values, use \"!=\" (not equal). For example, to ignore undefined values, specify the following expression: [PVAL, VALUE!=\"UNDEFINED\"] You can use wildcards to specify pattern-matching expressions in triggers. To configure the tag template settings, specify settings as described in the following table: Setting Description NAME (Required) Name of PI tag to be created or updated. VALUE (Required) Value to be assigned to PI tag (text). TRIGGER Event text from data source (can be specified using wildcards). TYPE String/integer/float/auto. \"Auto\" directs the interface to automatically detect the data type. UNITALIAS Configure how unit alias (AF: PI point reference) is created. By default, the alias is created in the unit. To override the default, specify the path where you want the alias created. For example: UNITALIAS = \\Building1\\Unit2 [PHASE] The alias is created under the Unit2 module, named using the value of the [PHASE] column. All batch interfaces support unit and phase level equipment aliases. Some interface support creation of equipment aliases at all levels of the batch hierarchy. For details, refer to the interface-specific section of this guide. PHASEALIAS Configure how the phase alias is created. By default, the alias is created in the phase module. To override the default, specify the path where you want the alias created. DESCRIPTOR Value for PI point descriptor attribute. TRANSLATE To enable translation, set to TRUE (default: FALSE). ANNOTATION Simple annotation to be written to the tag when the interface updates it. ANNOTATION2 Structured annotation to be written to the tag when the interface updates it. To configure tag templates that catch events raised by the interface when it updates the PI Batch Database, specify the following placeholders in the TRIGGER setting of the tag template: Placeholder Values Description EVENT PIEVENT Specify [EVENT, value=\"PIEVENT\"] DESCRIPT BATCH Specify the batch level you want to trigger on. For example: [DESCRIPT, value=\"UNITBATCH\"] [DESCRIPT, value=\"PHASE\"] UNITBATCH OPERATION PHASE PHASESTATE PHASESTEP PVAL START Specifies whether to catch the start or ending event of the specified level: END [PVAL, value=\"START\"] [PVAL, value=\"END\"] For example, to detect the start of a batch, specify the following expression: [EVENT, VALUE=\"PIEVENT\"][DESCRIPT, VALUE=\"BATCH\"][PVAL, VALUE=\"START\"] The following placeholders are supported when the triggering expression contains [Parameter, value=\"PIEVENT\"]. Placeholder Batch Database Event Frames [BATCHID] PIBatch and PIUnitBatch: BatchID property. For a top-level event frame, \"Name\" property. For second-level event frame, \"BatchID\" attribute. [PROCEDURE] PIBatch \"Recipe\" property Event frame \"Recipe\" attribute [UNITPROCEDURE] PIUnitBatch \"Procedure\" property Event frame \"Name\" property [OPERATION] PISubBatch \"Name\" property Event frame \"Name\" property [PHASE] Level 4 PISubBatch \"Name\" property Event frame \"Name\" property [PHASESTATE] Level 5 PISubBatch \"Name\" property Event frame \"Name\" property [PHASESTEP] Level 6 PISubBatch \"Name\" property Event frame \"Name\" property [UNIT] PIUnit \"Name\" property Event frame \"Name\" property [PHASEMODULE] Phase module \"Name\" property Event frame \"Name\" property"
  },
  "content/batch-interface-framework/pi-event-frames-interface-manager/define-recipe-templates.html": {
    "href": "content/batch-interface-framework/pi-event-frames-interface-manager/define-recipe-templates.html",
    "title": "Define Recipe templates",
    "keywords": "Define Recipe templates <!-- Topic requires customization for specific interface --> The interface includes a set of built-in default recipe templates that control the name assigned to each level in the batch hierarchy and the data stored at each level. To override the naming convention and data assigned to PI batches, unit batches, subbatches and event frames, you define recipe templates . To define recipe templates, launch the Event Frames Interface Manager and perform the following steps. Go to the Templates page and navigate to the list of recipe templates. Right-click the top Recipe node and choose Add Default Templates . A list of default recipe templates is displayed. For the recipe levels that you want to modify, configure basic settings as follows: Setting Description NAME (Required) Defines the convention used by the interface to assign names to procedures, unit procedures, etc. You can use the advanced parsing parameters to define this field. Example: abc_[PROCEDURE] If the procedure field of the incoming event contains \"Test\", the resulting name is \"abc_Test\". BATCHID (Optional) Specifies the batch ID for the procedure or unit procedure. MODULEPATH (Optional) For unit procedures (level 2) or phase (level 4), specifies where the recipe resides in the PI Module Database or PI AF element hierarchy. In the Module Database, the path specifies the location of the PIUnit for the unit batch. PRODUCT (Optional) Set the product for the recipe. Sets the Product field for procedures and unit procedures. To set the product field to the value read from the data source, specify the following placeholder: [PRODUCT] PRODUCTTRIGGER (Optional) Sets the product for the recipe after the recipe object is created. Intended for use when the product is defined in a separate event. If a product trigger is defined, the product is defined by the event that satisfies the trigger. If no product trigger is defined, the product gets its value from the event that created the recipe, and the template is populated by the event's placeholder data. Example: [Parameter, Value=\"Recipe Header\"] [Descript, value=\"Product Name\"] TRANSLATE (Optional) To enable translation, set to TRUE. Default: FALSE MERGE (Optional) To merge identically-named objects under the same parent, set to TRUE. Default: FALSE For event frames, you can configure the following additional settings. Template Name Description Descriptor (Optional) Specifies the Event frame descriptor property for the particular source Recipe object. DefaultProperty[x].Name (Optional) Name of the event frame template attribute. Valid values are Recipe, BatchID, Product and Procedure. Interface defined defaults place Recipe and BatchID at x=1, Product at x=2, and Procedure at x=3. DefaultProperty[x].Value (Optional) Defines the event attribute expression that evaluates to a valid value. DefaultProperty[x].Trigger (Optional) Defines the expression that specifies which event(s) to use to get the value. [Event,value=\"Recipe Header\"][descript,value=\"Product Code\"] DefaultProperty[x].UseFirstValue (Optional) Use the first matching event for the event frame to get the value if set to T or True. The default behavior is to use the last matching event. Category (Optional) For each recipe level, defines the event frame category. If the event that creates an event frame contains insufficient information, no category is assigned. To assign a category to an event frame after its creation, use Category[x]. Category[x].Name (Optional) For each recipe level, define the event frame category based on an event that is related to the particular recipe item. This setting can create as many categories as desired. The index is a positive integer that associate the Name and Trigger subproperties for the specific Category[x] property. If the AF category does not exist, the interface creates it. To use this setting, you must also specify the triggering event using the Recipe[#].Category[x].Trigger setting. Example: When the specified trigger event arrives, create an event frame, assigning it the SCR category. Category[10].Name = SCRCategory[10].Trigger = [Descript, value=\"Formula Name\"] [Pval, value=\"SCR 20051\"] Category[x].Trigger (Optional) Defines the expression that triggers assignment of a category by the Recipe[#].Category[x] setting. There can be multiple triggers for a single Recipe[#].Category[x].Name. To use this setting, you must also specify the category to be assigned, using the Recipe[#].Category[x].Name setting. Example: When any of the specified trigger event arrives, create an event frame, assigning it the SCR category. Category[10].Name = SCR Category[10].Trigger = [Descript, value=\"Formula Name\"] [Pval, value=\"SCR 20051\"] Category[10].Trigger = [Descript, value=\"Formula Name\"] [Pval, value=\"SCR 20051_01\"] Category[10].Trigger = [Descript, value=\"Formula Name\"] [Pval, value=\"SCR 20051_02\"] Template (Optional) For each recipe level, specify the event frame template. If the interface cannot find a matching event frame template, the template is left blank. To assign a template to an event frame after its creation, use the Template[x] property. Recipe[#].Template[x].Name (Optional) For each recipe level, this dynamic property enables you to define the event frame template. Based on any event that is related to particular recipe item. This property can assign only one AF template to a particular event frame. The interface uses the first matching Recipe[#].Template[x] property to be assigned to an event frame. The index is a positive integer that associates the Name and Trigger subproperties for the Template[x] property. If you specify this property, you must specify the Trigger property. Example: Template[10].Name = BATCH_A Template[10].Trigger = [Descript, value=\"Formula Name\"] [Pval, value=\"SCR 20051\"] Recipe[#].Template[x].Trigger (Optional) This property defines the triggering expression for the event frame template. There can be multiple triggers for a single recipe template. If you specify this property, you must specify the Name property. Example: Template[10].Name = BATCH_A Template[10].Trigger = [Descript, value=\"Formula Name\"] [Pval, value=\"SCR 20051\"] Template[10].Trigger = [Descript, value=\"Formula Name\"] [Pval, value=\"SCR 20051_01\"] Template[10].Trigger = [Descript, value=\"Formula Name\"] [Pval, value=\"SCR 20051_02\"] To save your changes, click Save Settings in the left pane."
  },
  "content/batch-interface-framework/pi-event-frames-interface-manager/event-frames-link-templates.html": {
    "href": "content/batch-interface-framework/pi-event-frames-interface-manager/event-frames-link-templates.html",
    "title": "Link Templates",
    "keywords": "Link Templates <!-- Topic requires customization for specific interface --> Link templates enable you to configure how event frames in an interface link to batch level event frames created by another interface. To add links, right-click the Link Templates node and choose Add Default Templates . Note: For link templates to work, configure Link to child event frames and Link from parent event frames as appropriate on the Batch Setup tab. Configuration Attribute Description Index Assigns a unique numeric identifier for the template. Value Specifies the name of a batch level event frame to be linked. Use placeholders to include values from the data emitted by the data source."
  },
  "content/batch-interface-framework/pi-event-frames-interface-manager/filters-tab.html": {
    "href": "content/batch-interface-framework/pi-event-frames-interface-manager/filters-tab.html",
    "title": "Filters tab",
    "keywords": "Filters tab <!-- Unmodified --> You use the Filters tab to configure the recipes, units, phases, or phase states to be excluded from processing by the interface. Skip Phases (/SKIPPHASES) The interface ignores any event that contains the specified phases in the [Phase] or [Phasemodule] column. Skip Units (/SKIPUNITS) The interface ignores any event containing the specified units in the [Unit] column. Skip Recipes (/SKIPRECIPES) The interface ignores any event containing the specified recipe in the appropriate column ([Procedure] for a procedure recipe, [UnitProcedure] for a unitprocedure recipe, and so on.) Exclude Phase States (/EXCLUDESTATES The interface ignores phase state events that contain the specified phase states in the [PhaseState] column."
  },
  "content/batch-interface-framework/pi-event-frames-interface-manager/interface-selection-tab.html": {
    "href": "content/batch-interface-framework/pi-event-frames-interface-manager/interface-selection-tab.html",
    "title": "Interface Selection tab",
    "keywords": "Interface Selection tab <!-- Static topic. No modifications usually required --> The Interface Selection tab is where you select or add a new instance of an interface. Click Interface Selection in the left panel to display a drop-down menu from which you can choose an interface. Note: PI Event Frames Manager defaults to the batch interface package with which it was installed. You will see the name of the default batch interface listed, along with the drop-down menu from which you can choose another installed instance. To configure settings using PI Event Frames Manager, select the interface instance you want to configure, or add a new instance. Once an interface instance is selected, the left panel of the PI Event Frames Manager displays tab options described in the following sections. The Interface Selection tab also provides options to add or remove interface instances: Click Add Interface to create a new interface instance. Click Remove Interface to remove an interface instance."
  },
  "content/batch-interface-framework/pi-event-frames-interface-manager/interface-selection-tab/create-a-new-instance-of-the-pi-efgen-interface.html": {
    "href": "content/batch-interface-framework/pi-event-frames-interface-manager/interface-selection-tab/create-a-new-instance-of-the-pi-efgen-interface.html",
    "title": "Create a new instance of the PI EFGen interface",
    "keywords": "Create a new instance of the PI EFGen interface Click Add Interface . A dialog window appears. Select an interface to configure from the drop-down list. Click Edit Service ID to give uniqueness to the configuration instance, and provide an Interface description if needed. Click OK . The Interface field displays the name of the PI EFGen instance that you created."
  },
  "content/batch-interface-framework/pi-event-frames-interface-manager/merge-setup-tab.html": {
    "href": "content/batch-interface-framework/pi-event-frames-interface-manager/merge-setup-tab.html",
    "title": "Merge Setup tab",
    "keywords": "Merge Setup tab <!-- Unmodified --> The command line parameter settings on this tab configure merging of the batch generation, as described in the following table: Merge settings (Command line parameter settings) Description Merge operation (/MOP) Merge identically-named operations under the same parent unit procedure. Merge unit procedures (/MUP) Merge identically-named sequential unit procedures running on the same unit into a single unit procedure. Merge multiple source batches with same batch ID into one batch (/MERGE) Enable merging of multiple source batches with same ID. The original data for each batch merged is stored in PI properties under a node named using the ID of the original batch. Batch ID mask (/BIDM) Override the incoming batch ID. Truncate batch ID (/TBID) Use the truncated batch ID in the batch ID field of unit procedures."
  },
  "content/batch-interface-framework/pi-event-frames-interface-manager/operational-settings-tab.html": {
    "href": "content/batch-interface-framework/pi-event-frames-interface-manager/operational-settings-tab.html",
    "title": "Operational Settings tab",
    "keywords": "Operational Settings tab <!-- Unmodified --> Modify the settings on the Operational Settings tab to configure the interface mode and other related settings. Operational Settings Realtime mode (/MODE= ) Interface modes are selected from the drop-down menu. Options are described in the table below. For the Recovery, Statistics, Preprocess, and Delete options, you can identify a Start Time and an End Time . Click the calendar icon associated with each field to select dates and times. Mode Description Realtime (default) Scan data source to collect data in realtime. Recovery Scan data source and generate or correct events accordingly. Always starts in recovery mode, then switches to realtime mode. Statistics Compare data source history against events and report results without updating any data. Preprocess Source data is written to the PI Data archives with timestamps earlier than those written to the primary PI archive. Note: This mode requires that you use the offline archive utility to reprocess older archives. This is done after completion when the interface stops. Delete Delete events for a specified period. Note: Selecting \"Delete mode\" limits you to specifying a Start Time only. In the GUI, the End Time is always specified with \"*\" asterisk symbol, a dereference operator pointed to by the variable's value. The interface allows for \"spot deletion\", meaning the deletion of event frames from within a specific time window. For example, you may have a scenario where you have received \"junk data\" from previous days. Spot deletion allows you to delete event frames back to the date when you began receiving unusable data. The GUI does not provide the means to specify both ends of the time window that you wish to delete. That can be done through edits to the configuration file. An RST for Delete mode can still be specified in the initialization file, but the GUI will always disable spot deletion. Perform one scan then stop (/SINGLERUN) The interface performs one scan of active points, then exits. Print result of first scan to file (/PRINT= ) Print the results of the first scan to the specified text file. The results include the event frame hierarchy tree, the tag list, and the equipment tree. This parameter is designed primarily for troubleshooting and configuration testing when the interface is run in statistics mode. Enter a name for the scan in the field provided (for example, C:\\Users\\jdoe\\Documents\\PIWPASXBatch1_stat.dat ). You have the option of clicking Select file to browse to the file path. Local debug messages (/DB=<#>) Specifies level of detail for logging as follows: 0: Log errors and warnings (default) 1: Log errors, warnings and major successes 2: Log all messages 3: Log all messages including Unirecord diagnostic messages Numeric settings (/NS= ) Configures how numeric values are formatted by the interface, to enable the interface to properly interpret numeric values based on the machine's regional setting or a user-specified language. Default is \"English (United States)\". Interface ID (/ID=x) Specifies the numeric interface instance identifier (maximum nine digits). To detect PI points maintained by the interface instance, the interface matches this setting against the value in the points' Location1 attribute. Point source (/PS=x) Point source for the interface instance. Point source is not case sensitive. Corresponds to the PointSource attribute of individual PI points. The interface loads PI points with the same point source. Failover settings Failover tag (/FAILOVERTAG=x) The PI tag to be used to coordinate failover. Click the icon to open the Tag search window, where you provide the name of the tag in the Tag Mask field. The tag that you select displays in the Failover tag field of PI Event Frames Interface Manager. Failover identifier (/FAILOVERID=x) A unique identifier for this interface instance, used to coordinate which instance is primary. Failover swap time (/SWAPTIME= ) Select to specify how long an interface can be inactive before failover to another instance occurs. The default is 300 seconds. Security settings Specify point security (/PTSEC=x) Override the default point security created by the interface. Click Change to open the Change security window. There you can select from or add to the options listed, and specify read/write authorizations for each. Click OK to change point security. Specify data security (/DATASEC=x) Override the default data security of PI points created by the interface. Click Change to open the Change security window."
  },
  "content/batch-interface-framework/pi-event-frames-interface-manager/pi-event-frames-interface-manager.html": {
    "href": "content/batch-interface-framework/pi-event-frames-interface-manager/pi-event-frames-interface-manager.html",
    "title": "PI Event Frames Interface Manager",
    "keywords": "PI Event Frames Interface Manager <!-- Static topic. No modifications usually required --> The PI Event Frames Interface Manager is a configuration tool that enables you to configure settings for batch interfaces. To configure settings using this tool, go to the Interface Selection tab and select the interface instance you want to configure, or add a new instance. On the remaining tabs, configure the settings for generating batch data. When you are done, go to the Save Settings tab to save your entries. To start the interface service with PI Event Frames Interface Manager, click Start Interface Service on the Service Configuration tab. To stop the interface service click Stop Interface Service . The following sections describe the settings on the tabs of the PI Event Frames Interface Manager configuration tool."
  },
  "content/batch-interface-framework/pi-event-frames-interface-manager/server-information-tab.html": {
    "href": "content/batch-interface-framework/pi-event-frames-interface-manager/server-information-tab.html",
    "title": "Server Information tab",
    "keywords": "Server Information tab <!-- Static topic. No modifications usually required --> The Server Information tab is where you configure the PI Data server and PI Asset server that you intend to use with the interface instance. The interface can generate either batches in the PI Batch Database or event frames in the PI Asset Framework. PI Data server (/HOST) settings The PI Data server specified under PI Data server specifies the server to which the interface sends batch data. Host is the IP address or fully-qualified domain name of the PI Data server. If the server that you want to use is not listed in the drop-down menu, add it to the known servers table using the About PI-SDK utility . If you are using a PI Data Archive version prior to 3.4.380.36, select Use explicit log in to specify a PI user name and PI password . If you are using a PI Data Archive version 3.4.380.36 and higher, use Windows Integrated Security for authentication. Ensure that the Windows account that runs the interface has sufficient permissions on the PI Data server to write data to PI points. Note: You must then configure a trust that permits access for the user that runs the interface service. PI Asset server settings In this section you configure PI Asset Framework configuration settings. Select Create event frames in PI Asset Framework to create event frames in PI Asset Framework, instead of creating batches in the PI Batch Database. The PI Asset server and PI Asset Framework database are displayed in the Host and Database (/AFHOST and /AFDATABASE) field. Click Select Asset server to open the Select Database window to choose an alternative server. Under Enable Auto Checkin , select from the following options: None : The interface will do nothing with checked out Event Frames on a restart/reconnection. Checkin : The interface will check in any checked out Event Frames on a restart/reconnection. Rollback : The interface will undo any checked out Event Frames on a restart/reconnection. Note: If the same user account is running multiple batch interfaces, our recommendation is to set Enable Auto Checkin to None. The OSIsoft best practice is to have a separate service account for each batch interface. If you are not using Windows Integrated Security for authentication, check User explicit login for PI Asset Framework and enter the Windows account and Password for the Windows user account that you intend to use to connect to PI Asset Framework."
  },
  "content/batch-interface-framework/pi-event-frames-interface-manager/service-configuration-tab.html": {
    "href": "content/batch-interface-framework/pi-event-frames-interface-manager/service-configuration-tab.html",
    "title": "Service Configuration tab",
    "keywords": "Service Configuration tab <!-- Unmodified --> This tab is where you install and configure the interface as a service. The status of your interface is indicated (for example, \"Interface PIWPASXBATCH1 is not installed as a service\") and you are notified as to whether the interface is running. Create service Click Create service to create the interface service. Start interface service Click Start Interface service to start the service, and click the Refresh icon to refresh a service. Watch interface log View a continuous scrolling log of event frame data. Apply service config Apply changes made to the interface service configuration. Display name Enter a name for the user and specify their role: Default Virtual user, Managed Service account, or User or Group. For a Managed Service account, complete the Log on as field. For a User or Group, fill in the Log on as and Password fields. Startup type Select a startup type from the drop-down menu. The default is Automatic. Other options include Boot, System, Manual, and Disabled. Dependencies Click the Add icon to add a service, and Delete icon to delete. Installed Services The list of installed services window populates based on your selection in the Dependencies list."
  },
  "content/batch-interface-framework/pi-event-frames-interface-manager/source-tab.html": {
    "href": "content/batch-interface-framework/pi-event-frames-interface-manager/source-tab.html",
    "title": "Source tab",
    "keywords": "Source tab <!-- Mark Bishop 6/18/21: Customized for Emerson Syncade --> <!-- Content below applies to all interfaces --> Configure the data sources that you want the interface to read. To add a data source, right-click the top Sources node and choose the Add option for the type of source you are configuring. After you add the first data source, all additional data sources must be the same type (event journal or SQL database). <!-- Custom content for interface below --> Note: To use explicit logins for an SQL data source, ensure that the user running the interface and the user configuring the interface are the same user. Database user name and Password are encrypted and stored in Windows Credential Manager. For details, see Windows Credential Manager for authentication ."
  },
  "content/batch-interface-framework/pi-event-frames-interface-manager/templates-tab.html": {
    "href": "content/batch-interface-framework/pi-event-frames-interface-manager/templates-tab.html",
    "title": "Templates tab",
    "keywords": "Templates tab <!-- Mark Bishop 6/18/21: Customized for Emerson Syncade --> Templates map data from the data source to PI tags, batches and event frames. When defining templates, you specify the data to be written and the events that trigger the update. To define templates using PI Event Frame Interface Manager, go to the Templates page and navigate to the desired type of template. You can configure templates that map the source data to string, integer or float data types. For each type of template, you specify triggers, which are conditions that active the template. You can define the following types of templates: <!-- Alarm Tag not applicable to Syncade * **Alarm tag:** Writes data to a PI tag when the data source raises an alarm. --> Tag: Creates and updates PI tags, specifying how they are named and what data is written to them. Property: Maps data to batch properties in the PI Batch Database or event frame attributes in PI AF. Recipe: Defines the information stored and the naming convention used at each level in the generated batch hierarchy. The following sections provide details about the specific types of templates."
  },
  "content/batch-interface-framework/pi-event-frames-interface-manager/templates-tab/define-attribute-templates.html": {
    "href": "content/batch-interface-framework/pi-event-frames-interface-manager/templates-tab/define-attribute-templates.html",
    "title": "Define attribute templates",
    "keywords": "Define attribute templates To define attribute templates using the PI Event Frames Interface Manager: On the Templates tab, right-click Attribute Templates and choose Add . The Configuration pane displays. On the Configuration pane, enter the following settings: Index: Assigns a unique numeric index for the template. Name: Specifies how the target attribute is named. To use incoming data from the data source to define how the attribute or property is to be named, click Add Placeholder… Within each hierarchy, property names must be unique. By default, properties are named Event_1, Event_2, and so on. Value: Specifies the value to be recorded. Use placeholders to derive values from the data emitted by the data source. Data type: PI data type of the value. Translate: If required, specifies how any English language values are to be translated before being stored in the PI System. UOM: (AF only) Unit of measure to be used to store value, if different from unit provided by data source. Advanced Features Description: (AF only) Populates the attribute's Description field. Engineering units: Unit of measurement. Category: Specifies the PI AF category to be assigned to the attribute."
  },
  "content/batch-interface-framework/pi-event-frames-interface-manager/templates-tab/link-templates-efim.html": {
    "href": "content/batch-interface-framework/pi-event-frames-interface-manager/templates-tab/link-templates-efim.html",
    "title": "Link templates",
    "keywords": "Link templates DCS Link Templates associate event frames from one interface to another. To create links, you define link templates on the Templates page of the PI Event Frame Interface Manager. The link templates specify events that contain link data and the naming of the destination event frame. Placeholders, wildcards and advanced parsing features enable you to extract precisely the desired data from the events that the interface reads from the data source. Triggers on the template define the events with linking information and the value specifies the name of the destination batch level event frame. To define a link template on the Templates page of the PI Event Frame Interface Manager, configure the following settings: Setting Description Value The name of the destination batch level event frame. Trigger The event that triggers the generation of the property. Updates can be triggered by the data source or by PI events such as the start or end of a recipe level. Examples To link an event frame that has an event where Descript is WorkflowID to a batch level event frame whose name is held in Pval in the same event, configure the template with the following settings: Setting Set to Value [Pval] Trigger [Descript, value=\"WorkflowID\"]"
  },
  "content/batch-interface-framework/pi-event-frames-interface-manager/templates-tab/property-templates-efim.html": {
    "href": "content/batch-interface-framework/pi-event-frames-interface-manager/templates-tab/property-templates-efim.html",
    "title": "Property templates",
    "keywords": "Property templates Property templates enable you to configure how data from the data source is written to event frame attributes or batch database properties. Each interface provides a set of default properties, which contain commonly-desired data. To add these properties, right-click the Property Templates node and choose Add Default Templates . Configuration Index Assigns a unique numeric identifier for the template. Name Specifies how the property is named. You can use placeholders to include values emitted by the data source. By default, properties reside under a parent recipe property. To specify a location in the hierarchy where you want the property to reside, define the name as a path, delimited using backslashes. For example, to specify that all properties generated using this template are located under a parent property named \"Materials\" plus the contents of the Event field, specify the name as follows: Materials\\[Event] . To create the property at the root level, precede the name with a dollar sign: $\\[Event] . Value Specifies the value to be recorded. Use placeholders to include values from the data emitted by the data source. Create property Specifies the level at which the property is to be created. Options are as follows: At recipe level : By default, properties are created at the recipe level corresponding to the level in the data source from which the data was read. Under root node : Create properties at the top level of the batch or event frame hierarchy, regardless of the level at which they originated. Under UniqueID node : (Batch database only, not event frames) Create properties under the batch's UniqueID node. Data type PI data type of the value. Note that if the incoming value is incompatible with the specified type, the event is not processed, and an error is logged. Translate Maps text from the data source to the text that you want to record in the PI System. UOM Unit of measure to be used to store value, if different from unit provided by data source. Advanced features Descriptor Populates the tag's Descriptor field. Engineering units Unit of measurement. Category Specifies the PI AF category to be associated with the value."
  },
  "content/batch-interface-framework/pi-event-frames-interface-manager/templates-tab/recipe-templates-efim.html": {
    "href": "content/batch-interface-framework/pi-event-frames-interface-manager/templates-tab/recipe-templates-efim.html",
    "title": "Recipe templates",
    "keywords": "Recipe templates <!-- Topic requires customization for specific interface --> Recipe templates enable you to configure the names that are assigned and the data that is stored at each level of the batch hierarchy. A set of default recipe templates are is included with each batch interface. To display and override the default recipe templates, right-click the Recipe Templates node and choose Add Default Templates . The settings for recipe templates are as follows. Configuration Index Specifies the level in recipe hierarchy as follows: Level Index PI object Default Procedure 1 PIBatch Recipe Recipe[1].Name=[Procedure] Unit Procedure 2 PIUnitBatch Procedure Recipe[2].Name = [UnitProcedure] Operation 3 PISubBatch Name field Recipe[3].Name=[Operation] Phase 4 PISubBatch Name field Recipe[4].Name=[Phase] Phase State 5 PISubBatch Name field Recipe[5].Name=[PhaseState] Phase Step 6 PISubBatch Name field Recipe[6].Name=[PhaseStep] Name Defines the naming convention used by the interface to assign names to batch events. For event frames, this template modifies the Recipe AF attribute. For the Batch database, this template modifies the PIBatch name. For example: abc_[Procedure] If the incoming event's [Procedure] field contains \"Test\", the resulting procedure Recipe field is \"abc_Test\". Advanced features Batch ID Configures the batch ID of the particular recipe object, overriding the incoming (default) batch ID. If you override the batch ID for the procedure, the batch ID is propagated to the child unit batches Batch ID field. For event frames, this template modifies the event frame name. Note: If you use a recipe template to set the batch ID, the recipe template overrides any batch ID mask you might have configured to enable merging of batches. Module/Element Path Specifies the location in the PI module or AF element hierarchy where the unit or phase module resides. Valid for unit procedure (level 2) and phase (level 4). Product Specifies the product of the particular recipe object. Supports the procedure and unit procedure [Product] fields, which must be present in the source event that creates the batch. If a product trigger is not defined, this template is populated based on the data in the event that creates the particular Recipe object. Product Trigger Populates the [Product] field of the particular recipe object after the object is created, which is useful if the product is defined in a separate event. For example: [Parameter, Value=\"Recipe Header\"] [Descript, value=\"Product Name\"] . Event Frame Template (Event frames only) Specifies the AF template to be used to create event frames for this recipe. Category (Event frames only) Specifies the AF category to be applied to the event frame. Merge same named objects under parent Combines identically named child objects."
  },
  "content/batch-interface-framework/pi-event-frames-interface-manager/templates-tab/tag-templates-efim.html": {
    "href": "content/batch-interface-framework/pi-event-frames-interface-manager/templates-tab/tag-templates-efim.html",
    "title": "Tag templates",
    "keywords": "Tag templates Tag templates create and update PI tags when events are read from the data source. Alarm tag templates create and update PI tags based on alarms raised by Emerson DeltaV Event Chronicle (alarms and events historian). If you define one or more triggers, the target PI tag is updated only when the specified events occur. If you do not define any triggers, every event from the data source triggers an update of the target PI tag. Tag aliases enable you to associate PI tags with equipment assets (PI units or AF elements). All batch interfaces support the creation of aliases at the unit batch and phase level. In addition, some batch interfaces permit you to define aliases at any level of the batch hierarchy by providing level-specific placeholders. For details, refer to the interface-specific section in this guide. Tag configuration Attribute Definition Index Specify a unique numeric identifier for the entry. Name Configures how the tag is named. To include data from the data source, use placeholders. Value The value to be written to the PI tag. To include data from the data source, use placeholders. Type The data type to be used to write the value to the tag. Note that if the incoming value is incompatible with the tag type, the event is not processed, and an error is logged. Translate Maps text from the data source to the text that you want to record in the PI System. Advanced features (attributes) Attribute Purpose Descriptor Populates the descriptor field for the target PI tag. Engineering units The engineering units for the data. Unit Alias Specifies an alias to be recorded under the Aliases node in the corresponding PIUnit or AF element. Phase Alias Specifies an alias to be recorded under the Phases > Aliases node in the corresponding PIUnit or element. Annotation Specifies the annotation to be associated with the event. The result is stored in a PI tag as a string. Use the NamedValues collection for annotations Store annotations in a PI tag as a name-value collection. The name is derived from the event sent by the data source. Remove annotations from tag values Store values without annotations."
  },
  "content/batch-interface-framework/pi-event-frames-interface-manager/templates-tab/triggers.html": {
    "href": "content/batch-interface-framework/pi-event-frames-interface-manager/templates-tab/triggers.html",
    "title": "Triggers",
    "keywords": "Triggers <!-- Topic requires customization for specific interface --> To specify the events that initiate updates to tags or properties, you define triggers. You can define triggers for events read from the data source and for batch-related events raised by the PI System itself (PI Events). To define triggers using PI Event Frame Interface Manager, go to the Templates page, navigate to the desired tag or property template, and click the Triggers tab. If you omit triggers, the target is updated by every event. If you specify multiple conditions in a single trigger, data is written only when all conditions are met (logical AND). If you define multiple triggers, data is written when any one of the conditions is met (logical OR). In the following example, the template is triggered when the PI System records the start of a batch: [Event,value=\"PIEVENT\"] [Descript, value=\"BATCH\"] [Pval, value=\"START\"]"
  },
  "content/batch-interface-framework/pi-event-frames-interface-manager/test-configuration-tab.html": {
    "href": "content/batch-interface-framework/pi-event-frames-interface-manager/test-configuration-tab.html",
    "title": "Test configuration tab",
    "keywords": "Test configuration tab <!-- Unmodified --> You test the configuration settings in the Test Configuration tab. Specify test settings as follows, then click Run Test , and check the output file for results. Field Description Output File The path to the text file where the test results are written. Start Time Start time for scanning End Time End time for scanning"
  },
  "content/batch-interface-framework/pi-event-frames-interface-manager/time-settings-tab.html": {
    "href": "content/batch-interface-framework/pi-event-frames-interface-manager/time-settings-tab.html",
    "title": "Time Settings tab",
    "keywords": "Time Settings tab <!-- Unmodified --> You use the Time Settings tab to configure the settings that control how the interface handles loss of connectivity and how it processes data. Query time settings Scan (/SCAN= ) Specifies how frequently the interface scans the data source. Cache time (/CACHETIME= ) Specifies how long completed events are retained in memory. Default is one day. Specify the maximum duration expected between events that need to be merged, plus any desired margin of safety. The value can be specified as whole day or fraction of a day. For example, to release completed batches when their end time is less than 7 days and 12 hours from current time, specify the following cache time setting: CACHETIME=7.5 days Abandoned batch timeout (/ABTO= ) The timeout has 2 functions: In history recovery, if a batch starts less than the recovery start time minus the abandoned batch timeout it is not recovered. For example, if a batch is open in recovery start time, and the start time is June 1, 2019 and we have a 30-day abandoned batch time, and the batch you found is on May 1, 2019, it will not be recovered. In real time mode, if a batch has not received a start or end time in the hierarchy - meaning in the top level of the event frame, or any of the children - and if the last updated time you get is less than the cache time minus the abandoned batch timeout, it will be considered abandoned. If July 1 is real time and cache time is one day, and our abandoned batch timeout is 30 days, and our last start time was April 29, it will be thrown from cache as abandoned. The following graphic illustrates the timeout logic: Maximum query time frame (/MAXQTF= ) To help manage workload and memory usage, defines the maximum time frame for queries. For example, if you specify 30 days and the interface queries for one year's worth of data, the interface issues 12 one-month queries rather than one (large) one-year query. Maximum stop time (/MAXSTOPTIME= ) Specifies the maximum time allowed for the interface to properly shutdown. If the shutdown process takes longer than the specified time, the interface is forced to terminate immediately. The default value is 120 seconds. Use local time stamps to process incoming events (/TS) Specifies whether timestamps from an SQL data source are interpreted as local time or GMT. By default, timestamps are interpreted as GMT. PI connection settings PI connection timeout (/PICONNTO= ) Override the default PI SDK Connection TimeOut property. PI data access timeout (/PIDATO= ) Override the default PI SDK Data Access TimeOut property. Retry (/RETRY= ) Specifies how often the interface retries failed attempts to write data. The default is 60 seconds. Retry timeout (/RETRYTO= ) Specifies how long the interface continues retrying an attempt to write data. To avoid data loss, set to 0 (default, no timeout). SQL server connection settings SQL connection timeout (/PICONNTO= ) Override the default SQL Connection TimeOut property. SQL data access timeout (/PIDATO= ) Override the default SQL Data Access TimeOut property."
  },
  "content/batch-interface-framework/pi-event-frames-interface-manager/windows-credential-manager-authentication.html": {
    "href": "content/batch-interface-framework/pi-event-frames-interface-manager/windows-credential-manager-authentication.html",
    "title": "Windows Credential Manager for authentication",
    "keywords": "Windows Credential Manager for authentication <!-- Update topic for specific interface --> Batch interfaces use Windows Credential Manager for authentication, encrypting your user name and log in information so that you are not required to re-enter authentication information for subsequent log ins. The .ini file includes PIUSECM, AFUSECM, and SOURCE.USECM flags that are set to False until your batch interface is run for the first time. After this point, the user name and password are stored in Windows Credential Manager, those .ini file flags are reset to True, thus authorizing your subsequent use of that machine without requiring you to reenter your log in credentials. After this point the user name and password are stored in Windows Credential Manager your user name and password information is encrypted Credentials are stored in Windows Credential Manager using the following format: {interfacename}_{interfaceid}_{source}. The {source} can be \"PI\", \"AF\", or can also be {source}_{index number} . For example, a credential used for the PI Interface for Emerson Syncade Batch may be identified in Windows Credential Manager as: <!-- Update <PLACHOLDERS> for interface --> <PLACEHOLDER>_1_PI for the PI Data server associated with the PI Interface for Emerson Syncade Batch <PLACEHOLDER>_1_AF for the PI Asset Framework server associated with the PI Interface for Emerson Syncade Batch <PLACEHOLDER>_1_Source_1 for the data source associated with the PI Interface for Emerson Syncade Batch You can change log in credentials by modifying the batch interface configuration file. Windows Credential Manager automatically updates with the newly encrypted log in information, resetting the flags in the .ini file to True."
  },
  "content/batch-interface-framework/README.html": {
    "href": "content/batch-interface-framework/README.html",
    "title": "PI Interface Doc Framework",
    "keywords": "PI Interface Doc Framework This repository is intednded to be used as a dependency in each PI Batch Interface document repository. Inject it into the applicable doucment repository using the git subtree command. For more information, see Documentation Frameworks . To add this repo as a subtree git subtree add --prefix content/batch-interface-framework https://github.com/osisoft/PI-Batch-Interface-Doc-Framework main --squash To pull latest repo updates into subtree git subtree pull --prefix content/batch-interface-framework https://github.com/osisoft/PI-Batch-Interface-Doc-Framework main --squash For usage on how to use subtrees, see https://docs.gitlab.com/ee/topics/git/subtree.html"
  },
  "content/batch-interface-framework/specific-considerations/data-sources.html": {
    "href": "content/batch-interface-framework/specific-considerations/data-sources.html",
    "title": "Data sources",
    "keywords": "Data sources <!-- Mark Bishop 6/18/21: Customized for Emerson Syncade --> PI Interface for Emerson Syncade Batch collects data historically from Syncade web services and real-time data from the Microsoft Message Queue (MSMQ). To configure the interface to collect historical data from a Syncade web service, specify the hostname of the Syncadeweb service host on the Source tab of the PI Event Frame Interface Configuration Manager as a URL. For example: https://MySyncadeHost.int:8081/emrWF/WebService/OrdersInterface.asmx Note: You only need to specify the complete URL. To configure the interface to collect real-time data from the Microsoft Message Queue, ensure that the Syncade system is configured to write data to a message queue on the interface machine and, on the Source tab of the PI Event Frame Interface Configuration Manager, select that message queue. SOURCE[1].msmqpath=localhost\\private$\\Q<name> Source[1].websrvpath=https://localhost:8081/emrWF/WebService/OrdersInterface.asmx"
  },
  "content/batch-interface-framework/specific-considerations/start-and-stop-support.html": {
    "href": "content/batch-interface-framework/specific-considerations/start-and-stop-support.html",
    "title": "Start and stop events",
    "keywords": "Start and stop events <!-- Mark Bishop 6/18/21: Customized for Emerson Syncade --> The start and end times set by the interface depend on the type of data source and whether the \"Use Batch Recipe\" (UBR) option is enabled. The UBR option is provided for backward compatibility with the interface. For each level, Syncade records the start time in the [StartUtcDateTime] timestamp and end time in the [EndUtcDateTime] timestamp of the object in which the event is recorded. For phase- and operation-level recipes, the interface creates parent procedures and unit procedures, using the start and end times of the operation or phase to start and end the parent levels. Syncade does not provide phase state or phase step data. The batch ID comes from the batch object's [OrderNumber] property, and the batch recipe type is provided for each object by the data source."
  },
  "content/batch-interface-framework/specific-considerations/template-placholders.html": {
    "href": "content/batch-interface-framework/specific-considerations/template-placholders.html",
    "title": "Template placeholders",
    "keywords": "Template placeholders <!-- Mark Bishop 6/18/21: Customized for Emerson Syncade --> The following sections list placeholders provided by PI Interface for Emerson Syncade Batch for defining template settings. Syncade Placeholders The data source provides XML formatted messages that the interface reads. The placeholders describing the recipe hierarchy depend on the style of recipe. The following examples use terminology like: OrderInstanceSummary/@Name where @Name is the name attribute on the OrderInstanceSummary XML element. In this release the supported batch hierarchical levels are: The following tables illustrate Placeholders for \"Master Recipe\", \"Process Segment\", \"Procedure\", and \"Unit Procedure\" recipe styles: Placeholder Master Recipe-style recipe [MASTERRECIPE] OrderInstanceSummary/@Name [PROCESSSEGMENT] OrderInstanceSummary/ItemInstanceSummary/@Name [PROCEDURE] OrderInstanceSummary/ItemInstanceSummary/ItemInstanceSummary/@Name [UNITPROCEDURE] OrderInstanceSummary/ItemInstanceSummary/ItemInstanceSummary/ItemInstanceSummary/@Name [OPERATION] OrderInstanceSummary/ItemInstanceSummary/ItemInstanceSummary/ItemInstanceSummary/ItemInstanceSummary/@Name In this example, the name of the fifth level down in the recipe Placeholder Process Segment-style recipe [PROCESSSEGMENT] OrderInstanceSummary/@Name [PROCEDURE] OrderInstanceSummary/ItemInstanceSummary/@Name [UNITPROCEDURE] OrderInstanceSummary/ItemInstanceSummary/ItemInstanceSummary/@Name [OPERATION] OrderInstanceSummary/ItemInstanceSummary/ItemInstanceSummary/ItemInstanceSummary/@Name In this example, the name of the fourth level down in the recipe. Placeholder Procedure-style recipe [PROCEDURE] OrderInstanceSummary/@Name [UNITPROCEDURE] OrderInstanceSummary/ItemInstanceSummary/@Name [OPERATION] OrderInstanceSummary/ItemInstanceSummary/ItemInstanceSummary/@Name In this example, the name of the third level down in the recipe. Placeholder Unit Procedure-style recipe [UNITPROCEDURE] OrderInstanceSummary/@Name [OPERATION] OrderInstanceSummary/ItemInstanceSummary/@Name In this example, the name of the second level down in the recipe. Placeholders that vary depending on whether the event occurs at the start or end of a step in the recipe: Placeholder Event at start of step Event at end of step [TIME] InstructionParameterInstance/@ActionDateTime for instruction parameters. or OrderInstanceSummary/@StartDateTime or ItemInstanceSummary/@StartDateTime for events. OrderInstanceSummary/@EndDateTime or ItemInstanceSummary/@EndDateTime for events. [TIMESTAMP] InstructionParameterInstance/@ActionDateTime for instruction parameters. or OrderInstanceSummary/@StartDateTime or ItemInstanceSummary/@StartDateTime for events. OrderInstanceSummary/@EndDateTime or ItemInstanceSummary/@EndDateTime for events. Placeholders for events that do not depend on recipe style or temporal relationship to step: Placeholder Example [AREA] constant string \"AREA_CS\" [BATCHID] OrderInstanceSummary/@OrderNumber [DESCRIPT] InstructionParameter/@Description [HIGH] InstructionParameterInstance/@High [LOW] InstructionParameterInstance/@Low [PARAMETER] InstructionParameter/@Name [PHASE] InstructionParameter/@Name [PROCESSCELL] constant string \"PROCESSCELL_CS\" [PVAL] InstructionParameterInstance/@CV [SET] InstructionParameterInstance/@Set [UNIQUEID] OrderInstanceSummary/@OrderNumber [UNIT] ItemInstanceSummary/@ActualUnitName [VALUE] InstructionParameterInstance/@CV"
  },
  "content/batch-interface-framework/specific-considerations/workflow-support.html": {
    "href": "content/batch-interface-framework/specific-considerations/workflow-support.html",
    "title": "Workflow support",
    "keywords": "Workflow support <!-- Mark Bishop 6/18/21: Customized for Emerson Syncade --> PI Interface for Emerson Syncade Batch supports Syncade Work Flow 4.6 and Syncade Work Flow 4.9. The interface supports only one version of Work Flow per instance, unless specifically set using the /WorkFlow46 command line parameter. The interface defaults to Syncade Work Flow 4.9. The interface can capture Syncade batches, including manual phase steps (using tag and property templates) from data sources and from Syncade web services (historical data) and the Microsoft Message Queue (real-time data)."
  },
  "content/batch-interface-framework/technical-support/frontmatter.html": {
    "href": "content/batch-interface-framework/technical-support/frontmatter.html",
    "title": "Technical support and other resources",
    "keywords": "Technical support and other resources For technical assistance, contact OSIsoft Technical Support at +1 510-297-5828 or through the OSIsoft Customer Portal Contact Us page. The Contact Us page offers additional contact options for customers outside of the United States. When you contact OSIsoft Technical Support, be prepared to provide this information: Product name, version, and build numbers Details about your computer platform (CPU type, operating system, and version number) Time that the difficulty started Log files at that time Details of any environment changes prior to the start of the issue Summary of the issue, including any relevant log files during the time the issue occurred To ask questions of others who use OSIsoft software, join the OSIsoft user community, PI Square . Members of the community can request advice and share ideas about the PI System. The PI Developers Club space within PI Square offers resources to help you with the programming and integration of OSIsoft products."
  },
  "README.html": {
    "href": "README.html",
    "title": "PI Interface for Emerson Syncade Documentation",
    "keywords": "PI Interface for Emerson Syncade Documentation User documentation for PI Interface for ABB 800xA Documentation. Note: This repository consumes two other repos as subtrees: https://github.com/osisoft/PI-Batch-Interface-Doc-Framework https://github.com/osisoft/PI-Interface-Doc-Framework License © 2019 - 2021 OSIsoft, LLC. All rights reserved. Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at: http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License."
  }
}